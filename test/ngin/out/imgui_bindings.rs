/* automatically generated by rust-bindgen 0.64.0 */

#[allow(non_snake_case)]
#[allow(dead_code)]
#[allow(unused_variables)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const IMGUI_VERSION: &[u8; 7usize] = b"1.91.3\0";
pub const IMGUI_VERSION_NUM: u32 = 19130;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 1;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 1;
pub const _CRT_HAS_C11: u32 = 0;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const FLT_EVAL_METHOD: u32 = 0;
pub const DBL_DECIMAL_DIG: u32 = 17;
pub const DBL_DIG: u32 = 15;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const DBL_MANT_DIG: u32 = 53;
pub const DBL_MAX_10_EXP: u32 = 308;
pub const DBL_MAX_EXP: u32 = 1024;
pub const DBL_MIN_10_EXP: i32 = -307;
pub const DBL_MIN_EXP: i32 = -1021;
pub const _DBL_RADIX: u32 = 2;
pub const FLT_DECIMAL_DIG: u32 = 9;
pub const FLT_DIG: u32 = 6;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const FLT_GUARD: u32 = 0;
pub const FLT_MANT_DIG: u32 = 24;
pub const FLT_MAX_10_EXP: u32 = 38;
pub const FLT_MAX_EXP: u32 = 128;
pub const FLT_MIN_10_EXP: i32 = -37;
pub const FLT_MIN_EXP: i32 = -125;
pub const FLT_NORMALIZE: u32 = 0;
pub const FLT_RADIX: u32 = 2;
pub const LDBL_DIG: u32 = 15;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_MANT_DIG: u32 = 53;
pub const LDBL_MAX_10_EXP: u32 = 308;
pub const LDBL_MAX_EXP: u32 = 1024;
pub const LDBL_MIN_10_EXP: i32 = -307;
pub const LDBL_MIN_EXP: i32 = -1021;
pub const _LDBL_RADIX: u32 = 2;
pub const DECIMAL_DIG: u32 = 17;
pub const _SW_INEXACT: u32 = 1;
pub const _SW_UNDERFLOW: u32 = 2;
pub const _SW_OVERFLOW: u32 = 4;
pub const _SW_ZERODIVIDE: u32 = 8;
pub const _SW_INVALID: u32 = 16;
pub const _SW_DENORMAL: u32 = 524288;
pub const _EM_AMBIGUIOUS: u32 = 2147483648;
pub const _EM_AMBIGUOUS: u32 = 2147483648;
pub const _MCW_EM: u32 = 524319;
pub const _EM_INEXACT: u32 = 1;
pub const _EM_UNDERFLOW: u32 = 2;
pub const _EM_OVERFLOW: u32 = 4;
pub const _EM_ZERODIVIDE: u32 = 8;
pub const _EM_INVALID: u32 = 16;
pub const _EM_DENORMAL: u32 = 524288;
pub const _MCW_RC: u32 = 768;
pub const _RC_NEAR: u32 = 0;
pub const _RC_DOWN: u32 = 256;
pub const _RC_UP: u32 = 512;
pub const _RC_CHOP: u32 = 768;
pub const _MCW_PC: u32 = 196608;
pub const _PC_64: u32 = 0;
pub const _PC_53: u32 = 65536;
pub const _PC_24: u32 = 131072;
pub const _MCW_IC: u32 = 262144;
pub const _IC_AFFINE: u32 = 262144;
pub const _IC_PROJECTIVE: u32 = 0;
pub const _MCW_DN: u32 = 50331648;
pub const _DN_SAVE: u32 = 0;
pub const _DN_FLUSH: u32 = 16777216;
pub const _DN_FLUSH_OPERANDS_SAVE_RESULTS: u32 = 33554432;
pub const _DN_SAVE_OPERANDS_FLUSH_RESULTS: u32 = 50331648;
pub const _SW_UNEMULATED: u32 = 64;
pub const _SW_SQRTNEG: u32 = 128;
pub const _SW_STACKOVERFLOW: u32 = 512;
pub const _SW_STACKUNDERFLOW: u32 = 1024;
pub const _FPE_INVALID: u32 = 129;
pub const _FPE_DENORMAL: u32 = 130;
pub const _FPE_ZERODIVIDE: u32 = 131;
pub const _FPE_OVERFLOW: u32 = 132;
pub const _FPE_UNDERFLOW: u32 = 133;
pub const _FPE_INEXACT: u32 = 134;
pub const _FPE_UNEMULATED: u32 = 135;
pub const _FPE_SQRTNEG: u32 = 136;
pub const _FPE_STACKOVERFLOW: u32 = 138;
pub const _FPE_STACKUNDERFLOW: u32 = 139;
pub const _FPE_EXPLICITGEN: u32 = 140;
pub const _FPE_MULTIPLE_TRAPS: u32 = 141;
pub const _FPE_MULTIPLE_FAULTS: u32 = 142;
pub const _FPCLASS_SNAN: u32 = 1;
pub const _FPCLASS_QNAN: u32 = 2;
pub const _FPCLASS_NINF: u32 = 4;
pub const _FPCLASS_NN: u32 = 8;
pub const _FPCLASS_ND: u32 = 16;
pub const _FPCLASS_NZ: u32 = 32;
pub const _FPCLASS_PZ: u32 = 64;
pub const _FPCLASS_PD: u32 = 128;
pub const _FPCLASS_PN: u32 = 256;
pub const _FPCLASS_PINF: u32 = 512;
pub const _CW_DEFAULT: u32 = 524319;
pub const DBL_RADIX: u32 = 2;
pub const LDBL_RADIX: u32 = 2;
pub const EM_AMBIGUIOUS: u32 = 2147483648;
pub const EM_AMBIGUOUS: u32 = 2147483648;
pub const MCW_EM: u32 = 524319;
pub const EM_INVALID: u32 = 16;
pub const EM_DENORMAL: u32 = 524288;
pub const EM_ZERODIVIDE: u32 = 8;
pub const EM_OVERFLOW: u32 = 4;
pub const EM_UNDERFLOW: u32 = 2;
pub const EM_INEXACT: u32 = 1;
pub const MCW_IC: u32 = 262144;
pub const IC_AFFINE: u32 = 262144;
pub const IC_PROJECTIVE: u32 = 0;
pub const MCW_RC: u32 = 768;
pub const RC_CHOP: u32 = 768;
pub const RC_UP: u32 = 512;
pub const RC_DOWN: u32 = 256;
pub const RC_NEAR: u32 = 0;
pub const MCW_PC: u32 = 196608;
pub const PC_24: u32 = 131072;
pub const PC_53: u32 = 65536;
pub const PC_64: u32 = 0;
pub const CW_DEFAULT: u32 = 524319;
pub const SW_INVALID: u32 = 16;
pub const SW_DENORMAL: u32 = 524288;
pub const SW_ZERODIVIDE: u32 = 8;
pub const SW_OVERFLOW: u32 = 4;
pub const SW_UNDERFLOW: u32 = 2;
pub const SW_INEXACT: u32 = 1;
pub const SW_UNEMULATED: u32 = 64;
pub const SW_SQRTNEG: u32 = 128;
pub const SW_STACKOVERFLOW: u32 = 512;
pub const SW_STACKUNDERFLOW: u32 = 1024;
pub const FPE_INVALID: u32 = 129;
pub const FPE_DENORMAL: u32 = 130;
pub const FPE_ZERODIVIDE: u32 = 131;
pub const FPE_OVERFLOW: u32 = 132;
pub const FPE_UNDERFLOW: u32 = 133;
pub const FPE_INEXACT: u32 = 134;
pub const FPE_UNEMULATED: u32 = 135;
pub const FPE_SQRTNEG: u32 = 136;
pub const FPE_STACKOVERFLOW: u32 = 138;
pub const FPE_STACKUNDERFLOW: u32 = 139;
pub const FPE_EXPLICITGEN: u32 = 140;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const IMGUI_PAYLOAD_TYPE_COLOR_3F: &[u8; 7usize] = b"_COL3F\0";
pub const IMGUI_PAYLOAD_TYPE_COLOR_4F: &[u8; 7usize] = b"_COL4F\0";
pub const IM_UNICODE_CODEPOINT_INVALID: u32 = 65533;
pub const IM_UNICODE_CODEPOINT_MAX: u32 = 65535;
pub const IM_COL32_R_SHIFT: u32 = 0;
pub const IM_COL32_G_SHIFT: u32 = 8;
pub const IM_COL32_B_SHIFT: u32 = 16;
pub const IM_COL32_A_SHIFT: u32 = 24;
pub const IM_COL32_A_MASK: u32 = 4278190080;
pub const IM_DRAWLIST_TEX_LINES_WIDTH_MAX: u32 = 63;
pub type ImGuiID = ::std::os::raw::c_uint;
pub type ImS8 = ::std::os::raw::c_schar;
pub type ImU8 = ::std::os::raw::c_uchar;
pub type ImS16 = ::std::os::raw::c_short;
pub type ImU16 = ::std::os::raw::c_ushort;
pub type ImS32 = ::std::os::raw::c_int;
pub type ImU32 = ::std::os::raw::c_uint;
pub type ImS64 = ::std::os::raw::c_longlong;
pub type ImU64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawListSharedData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontBuilderIO {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiContext {
    _unused: [u8; 0],
}
pub type ImGuiCol = ::std::os::raw::c_int;
pub type ImGuiCond = ::std::os::raw::c_int;
pub type ImGuiDataType = ::std::os::raw::c_int;
pub type ImGuiMouseButton = ::std::os::raw::c_int;
pub type ImGuiMouseCursor = ::std::os::raw::c_int;
pub type ImGuiStyleVar = ::std::os::raw::c_int;
pub type ImGuiTableBgTarget = ::std::os::raw::c_int;
pub type ImDrawFlags = ::std::os::raw::c_int;
pub type ImDrawListFlags = ::std::os::raw::c_int;
pub type ImFontAtlasFlags = ::std::os::raw::c_int;
pub type ImGuiBackendFlags = ::std::os::raw::c_int;
pub type ImGuiButtonFlags = ::std::os::raw::c_int;
pub type ImGuiChildFlags = ::std::os::raw::c_int;
pub type ImGuiColorEditFlags = ::std::os::raw::c_int;
pub type ImGuiConfigFlags = ::std::os::raw::c_int;
pub type ImGuiComboFlags = ::std::os::raw::c_int;
pub type ImGuiDockNodeFlags = ::std::os::raw::c_int;
pub type ImGuiDragDropFlags = ::std::os::raw::c_int;
pub type ImGuiFocusedFlags = ::std::os::raw::c_int;
pub type ImGuiHoveredFlags = ::std::os::raw::c_int;
pub type ImGuiInputFlags = ::std::os::raw::c_int;
pub type ImGuiInputTextFlags = ::std::os::raw::c_int;
pub type ImGuiItemFlags = ::std::os::raw::c_int;
pub type ImGuiKeyChord = ::std::os::raw::c_int;
pub type ImGuiPopupFlags = ::std::os::raw::c_int;
pub type ImGuiMultiSelectFlags = ::std::os::raw::c_int;
pub type ImGuiSelectableFlags = ::std::os::raw::c_int;
pub type ImGuiSliderFlags = ::std::os::raw::c_int;
pub type ImGuiTabBarFlags = ::std::os::raw::c_int;
pub type ImGuiTabItemFlags = ::std::os::raw::c_int;
pub type ImGuiTableFlags = ::std::os::raw::c_int;
pub type ImGuiTableColumnFlags = ::std::os::raw::c_int;
pub type ImGuiTableRowFlags = ::std::os::raw::c_int;
pub type ImGuiTreeNodeFlags = ::std::os::raw::c_int;
pub type ImGuiViewportFlags = ::std::os::raw::c_int;
pub type ImGuiWindowFlags = ::std::os::raw::c_int;
pub type ImTextureID = *mut ::std::os::raw::c_void;
pub type ImDrawIdx = ::std::os::raw::c_ushort;
pub type ImWchar32 = ::std::os::raw::c_uint;
pub type ImWchar16 = ::std::os::raw::c_ushort;
pub type ImWchar = ImWchar16;
pub type ImGuiSelectionUserData = ImS64;
pub type ImGuiInputTextCallback = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ImGuiInputTextCallbackData) -> ::std::os::raw::c_int,
>;
pub type ImGuiSizeCallback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ImGuiSizeCallbackData)>;
pub type ImGuiMemAllocFunc = ::std::option::Option<
    unsafe extern "C" fn(
        sz: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type ImGuiMemFreeFunc = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2 {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_ImVec2() {
    const UNINIT: ::std::mem::MaybeUninit<ImVec2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVec2>(),
        8usize,
        concat!("Size of: ", stringify!(ImVec2))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec2>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(y))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_ImVec4() {
    const UNINIT: ::std::mem::MaybeUninit<ImVec4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVec4>(),
        16usize,
        concat!("Size of: ", stringify!(ImVec4))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec4>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(w))
    );
}
extern "C" {
    #[link_name = "\u{1}?CreateContext@ImGui@@YAPEAUImGuiContext@@PEAUImFontAtlas@@@Z"]
    pub fn ImGui_CreateContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
extern "C" {
    #[link_name = "\u{1}?DestroyContext@ImGui@@YAXPEAUImGuiContext@@@Z"]
    pub fn ImGui_DestroyContext(ctx: *mut ImGuiContext);
}
extern "C" {
    #[link_name = "\u{1}?GetCurrentContext@ImGui@@YAPEAUImGuiContext@@XZ"]
    pub fn ImGui_GetCurrentContext() -> *mut ImGuiContext;
}
extern "C" {
    #[link_name = "\u{1}?SetCurrentContext@ImGui@@YAXPEAUImGuiContext@@@Z"]
    pub fn ImGui_SetCurrentContext(ctx: *mut ImGuiContext);
}
extern "C" {
    #[link_name = "\u{1}?GetIO@ImGui@@YAAEAUImGuiIO@@XZ"]
    pub fn ImGui_GetIO() -> *mut ImGuiIO;
}
extern "C" {
    #[link_name = "\u{1}?GetPlatformIO@ImGui@@YAAEAUImGuiPlatformIO@@XZ"]
    pub fn ImGui_GetPlatformIO() -> *mut ImGuiPlatformIO;
}
extern "C" {
    #[link_name = "\u{1}?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ"]
    pub fn ImGui_GetStyle() -> *mut ImGuiStyle;
}
extern "C" {
    #[link_name = "\u{1}?NewFrame@ImGui@@YAXXZ"]
    pub fn ImGui_NewFrame();
}
extern "C" {
    #[link_name = "\u{1}?EndFrame@ImGui@@YAXXZ"]
    pub fn ImGui_EndFrame();
}
extern "C" {
    #[link_name = "\u{1}?Render@ImGui@@YAXXZ"]
    pub fn ImGui_Render();
}
extern "C" {
    #[link_name = "\u{1}?GetDrawData@ImGui@@YAPEAUImDrawData@@XZ"]
    pub fn ImGui_GetDrawData() -> *mut ImDrawData;
}
extern "C" {
    #[link_name = "\u{1}?ShowDemoWindow@ImGui@@YAXPEA_N@Z"]
    pub fn ImGui_ShowDemoWindow(p_open: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}?ShowMetricsWindow@ImGui@@YAXPEA_N@Z"]
    pub fn ImGui_ShowMetricsWindow(p_open: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}?ShowDebugLogWindow@ImGui@@YAXPEA_N@Z"]
    pub fn ImGui_ShowDebugLogWindow(p_open: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}?ShowIDStackToolWindow@ImGui@@YAXPEA_N@Z"]
    pub fn ImGui_ShowIDStackToolWindow(p_open: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}?ShowAboutWindow@ImGui@@YAXPEA_N@Z"]
    pub fn ImGui_ShowAboutWindow(p_open: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z"]
    pub fn ImGui_ShowStyleEditor(ref_: *mut ImGuiStyle);
}
extern "C" {
    #[link_name = "\u{1}?ShowStyleSelector@ImGui@@YA_NPEBD@Z"]
    pub fn ImGui_ShowStyleSelector(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ShowFontSelector@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_ShowFontSelector(label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?ShowUserGuide@ImGui@@YAXXZ"]
    pub fn ImGui_ShowUserGuide();
}
extern "C" {
    #[link_name = "\u{1}?GetVersion@ImGui@@YAPEBDXZ"]
    pub fn ImGui_GetVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z"]
    pub fn ImGui_StyleColorsDark(dst: *mut ImGuiStyle);
}
extern "C" {
    #[link_name = "\u{1}?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z"]
    pub fn ImGui_StyleColorsLight(dst: *mut ImGuiStyle);
}
extern "C" {
    #[link_name = "\u{1}?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z"]
    pub fn ImGui_StyleColorsClassic(dst: *mut ImGuiStyle);
}
extern "C" {
    #[link_name = "\u{1}?Begin@ImGui@@YA_NPEBDPEA_NH@Z"]
    pub fn ImGui_Begin(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?End@ImGui@@YAXXZ"]
    pub fn ImGui_End();
}
extern "C" {
    #[link_name = "\u{1}?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@HH@Z"]
    pub fn ImGui_BeginChild(
        str_id: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginChild@ImGui@@YA_NIAEBUImVec2@@HH@Z"]
    pub fn ImGui_BeginChild1(
        id: ImGuiID,
        size: *const ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndChild@ImGui@@YAXXZ"]
    pub fn ImGui_EndChild();
}
extern "C" {
    #[link_name = "\u{1}?IsWindowAppearing@ImGui@@YA_NXZ"]
    pub fn ImGui_IsWindowAppearing() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsWindowCollapsed@ImGui@@YA_NXZ"]
    pub fn ImGui_IsWindowCollapsed() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsWindowFocused@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsWindowFocused(flags: ImGuiFocusedFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsWindowHovered@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsWindowHovered(flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ"]
    pub fn ImGui_GetWindowDrawList() -> *mut ImDrawList;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowDpiScale@ImGui@@YAMXZ"]
    pub fn ImGui_GetWindowDpiScale() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowPos@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetWindowPos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowSize@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetWindowSize() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowWidth@ImGui@@YAMXZ"]
    pub fn ImGui_GetWindowWidth() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowHeight@ImGui@@YAMXZ"]
    pub fn ImGui_GetWindowHeight() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowViewport@ImGui@@YAPEAUImGuiViewport@@XZ"]
    pub fn ImGui_GetWindowViewport() -> *mut ImGuiViewport;
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z"]
    pub fn ImGui_SetNextWindowPos(pos: *const ImVec2, cond: ImGuiCond, pivot: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z"]
    pub fn ImGui_SetNextWindowSize(size: *const ImVec2, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z"]
    pub fn ImGui_SetNextWindowSizeConstraints(
        size_min: *const ImVec2,
        size_max: *const ImVec2,
        custom_callback: ImGuiSizeCallback,
        custom_callback_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowContentSize@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_SetNextWindowContentSize(size: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowCollapsed@ImGui@@YAX_NH@Z"]
    pub fn ImGui_SetNextWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowFocus@ImGui@@YAXXZ"]
    pub fn ImGui_SetNextWindowFocus();
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowScroll@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_SetNextWindowScroll(scroll: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowBgAlpha@ImGui@@YAXM@Z"]
    pub fn ImGui_SetNextWindowBgAlpha(alpha: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowViewport@ImGui@@YAXI@Z"]
    pub fn ImGui_SetNextWindowViewport(viewport_id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}?SetWindowPos@ImGui@@YAXAEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowPos(pos: *const ImVec2, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetWindowSize@ImGui@@YAXAEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowSize(size: *const ImVec2, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetWindowCollapsed@ImGui@@YAX_NH@Z"]
    pub fn ImGui_SetWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetWindowFocus@ImGui@@YAXXZ"]
    pub fn ImGui_SetWindowFocus();
}
extern "C" {
    #[link_name = "\u{1}?SetWindowFontScale@ImGui@@YAXM@Z"]
    pub fn ImGui_SetWindowFontScale(scale: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetWindowPos@ImGui@@YAXPEBDAEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowPos1(
        name: *const ::std::os::raw::c_char,
        pos: *const ImVec2,
        cond: ImGuiCond,
    );
}
extern "C" {
    #[link_name = "\u{1}?SetWindowSize@ImGui@@YAXPEBDAEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowSize1(
        name: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        cond: ImGuiCond,
    );
}
extern "C" {
    #[link_name = "\u{1}?SetWindowCollapsed@ImGui@@YAXPEBD_NH@Z"]
    pub fn ImGui_SetWindowCollapsed1(
        name: *const ::std::os::raw::c_char,
        collapsed: bool,
        cond: ImGuiCond,
    );
}
extern "C" {
    #[link_name = "\u{1}?SetWindowFocus@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_SetWindowFocus1(name: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?GetScrollX@ImGui@@YAMXZ"]
    pub fn ImGui_GetScrollX() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetScrollY@ImGui@@YAMXZ"]
    pub fn ImGui_GetScrollY() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?SetScrollX@ImGui@@YAXM@Z"]
    pub fn ImGui_SetScrollX(scroll_x: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetScrollY@ImGui@@YAXM@Z"]
    pub fn ImGui_SetScrollY(scroll_y: f32);
}
extern "C" {
    #[link_name = "\u{1}?GetScrollMaxX@ImGui@@YAMXZ"]
    pub fn ImGui_GetScrollMaxX() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetScrollMaxY@ImGui@@YAMXZ"]
    pub fn ImGui_GetScrollMaxY() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?SetScrollHereX@ImGui@@YAXM@Z"]
    pub fn ImGui_SetScrollHereX(center_x_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetScrollHereY@ImGui@@YAXM@Z"]
    pub fn ImGui_SetScrollHereY(center_y_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetScrollFromPosX@ImGui@@YAXMM@Z"]
    pub fn ImGui_SetScrollFromPosX(local_x: f32, center_x_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetScrollFromPosY@ImGui@@YAXMM@Z"]
    pub fn ImGui_SetScrollFromPosY(local_y: f32, center_y_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}?PushFont@ImGui@@YAXPEAUImFont@@@Z"]
    pub fn ImGui_PushFont(font: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}?PopFont@ImGui@@YAXXZ"]
    pub fn ImGui_PopFont();
}
extern "C" {
    #[link_name = "\u{1}?PushStyleColor@ImGui@@YAXHI@Z"]
    pub fn ImGui_PushStyleColor(idx: ImGuiCol, col: ImU32);
}
extern "C" {
    #[link_name = "\u{1}?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z"]
    pub fn ImGui_PushStyleColor1(idx: ImGuiCol, col: *const ImVec4);
}
extern "C" {
    #[link_name = "\u{1}?PopStyleColor@ImGui@@YAXH@Z"]
    pub fn ImGui_PopStyleColor(count: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?PushStyleVar@ImGui@@YAXHM@Z"]
    pub fn ImGui_PushStyleVar(idx: ImGuiStyleVar, val: f32);
}
extern "C" {
    #[link_name = "\u{1}?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z"]
    pub fn ImGui_PushStyleVar1(idx: ImGuiStyleVar, val: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}?PushStyleVarX@ImGui@@YAXHM@Z"]
    pub fn ImGui_PushStyleVarX(idx: ImGuiStyleVar, val_x: f32);
}
extern "C" {
    #[link_name = "\u{1}?PushStyleVarY@ImGui@@YAXHM@Z"]
    pub fn ImGui_PushStyleVarY(idx: ImGuiStyleVar, val_y: f32);
}
extern "C" {
    #[link_name = "\u{1}?PopStyleVar@ImGui@@YAXH@Z"]
    pub fn ImGui_PopStyleVar(count: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?PushItemFlag@ImGui@@YAXH_N@Z"]
    pub fn ImGui_PushItemFlag(option: ImGuiItemFlags, enabled: bool);
}
extern "C" {
    #[link_name = "\u{1}?PopItemFlag@ImGui@@YAXXZ"]
    pub fn ImGui_PopItemFlag();
}
extern "C" {
    #[link_name = "\u{1}?PushItemWidth@ImGui@@YAXM@Z"]
    pub fn ImGui_PushItemWidth(item_width: f32);
}
extern "C" {
    #[link_name = "\u{1}?PopItemWidth@ImGui@@YAXXZ"]
    pub fn ImGui_PopItemWidth();
}
extern "C" {
    #[link_name = "\u{1}?SetNextItemWidth@ImGui@@YAXM@Z"]
    pub fn ImGui_SetNextItemWidth(item_width: f32);
}
extern "C" {
    #[link_name = "\u{1}?CalcItemWidth@ImGui@@YAMXZ"]
    pub fn ImGui_CalcItemWidth() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?PushTextWrapPos@ImGui@@YAXM@Z"]
    pub fn ImGui_PushTextWrapPos(wrap_local_pos_x: f32);
}
extern "C" {
    #[link_name = "\u{1}?PopTextWrapPos@ImGui@@YAXXZ"]
    pub fn ImGui_PopTextWrapPos();
}
extern "C" {
    #[link_name = "\u{1}?GetFont@ImGui@@YAPEAUImFont@@XZ"]
    pub fn ImGui_GetFont() -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}?GetFontSize@ImGui@@YAMXZ"]
    pub fn ImGui_GetFontSize() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetFontTexUvWhitePixel@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetFontTexUvWhitePixel() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetColorU32@ImGui@@YAIHM@Z"]
    pub fn ImGui_GetColorU32(idx: ImGuiCol, alpha_mul: f32) -> ImU32;
}
extern "C" {
    #[link_name = "\u{1}?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z"]
    pub fn ImGui_GetColorU321(col: *const ImVec4) -> ImU32;
}
extern "C" {
    #[link_name = "\u{1}?GetColorU32@ImGui@@YAIIM@Z"]
    pub fn ImGui_GetColorU322(col: ImU32, alpha_mul: f32) -> ImU32;
}
extern "C" {
    #[link_name = "\u{1}?GetStyleColorVec4@ImGui@@YAAEBUImVec4@@H@Z"]
    pub fn ImGui_GetStyleColorVec4(idx: ImGuiCol) -> *const ImVec4;
}
extern "C" {
    #[link_name = "\u{1}?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetCursorScreenPos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?SetCursorScreenPos@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_SetCursorScreenPos(pos: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetContentRegionAvail() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetCursorPos@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetCursorPos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetCursorPosX@ImGui@@YAMXZ"]
    pub fn ImGui_GetCursorPosX() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetCursorPosY@ImGui@@YAMXZ"]
    pub fn ImGui_GetCursorPosY() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?SetCursorPos@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_SetCursorPos(local_pos: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}?SetCursorPosX@ImGui@@YAXM@Z"]
    pub fn ImGui_SetCursorPosX(local_x: f32);
}
extern "C" {
    #[link_name = "\u{1}?SetCursorPosY@ImGui@@YAXM@Z"]
    pub fn ImGui_SetCursorPosY(local_y: f32);
}
extern "C" {
    #[link_name = "\u{1}?GetCursorStartPos@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetCursorStartPos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?Separator@ImGui@@YAXXZ"]
    pub fn ImGui_Separator();
}
extern "C" {
    #[link_name = "\u{1}?SameLine@ImGui@@YAXMM@Z"]
    pub fn ImGui_SameLine(offset_from_start_x: f32, spacing: f32);
}
extern "C" {
    #[link_name = "\u{1}?NewLine@ImGui@@YAXXZ"]
    pub fn ImGui_NewLine();
}
extern "C" {
    #[link_name = "\u{1}?Spacing@ImGui@@YAXXZ"]
    pub fn ImGui_Spacing();
}
extern "C" {
    #[link_name = "\u{1}?Dummy@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_Dummy(size: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}?Indent@ImGui@@YAXM@Z"]
    pub fn ImGui_Indent(indent_w: f32);
}
extern "C" {
    #[link_name = "\u{1}?Unindent@ImGui@@YAXM@Z"]
    pub fn ImGui_Unindent(indent_w: f32);
}
extern "C" {
    #[link_name = "\u{1}?BeginGroup@ImGui@@YAXXZ"]
    pub fn ImGui_BeginGroup();
}
extern "C" {
    #[link_name = "\u{1}?EndGroup@ImGui@@YAXXZ"]
    pub fn ImGui_EndGroup();
}
extern "C" {
    #[link_name = "\u{1}?AlignTextToFramePadding@ImGui@@YAXXZ"]
    pub fn ImGui_AlignTextToFramePadding();
}
extern "C" {
    #[link_name = "\u{1}?GetTextLineHeight@ImGui@@YAMXZ"]
    pub fn ImGui_GetTextLineHeight() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetTextLineHeightWithSpacing@ImGui@@YAMXZ"]
    pub fn ImGui_GetTextLineHeightWithSpacing() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetFrameHeight@ImGui@@YAMXZ"]
    pub fn ImGui_GetFrameHeight() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?GetFrameHeightWithSpacing@ImGui@@YAMXZ"]
    pub fn ImGui_GetFrameHeightWithSpacing() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?PushID@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_PushID(str_id: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?PushID@ImGui@@YAXPEBD0@Z"]
    pub fn ImGui_PushID1(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?PushID@ImGui@@YAXPEBX@Z"]
    pub fn ImGui_PushID2(ptr_id: *const ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?PushID@ImGui@@YAXH@Z"]
    pub fn ImGui_PushID3(int_id: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?PopID@ImGui@@YAXXZ"]
    pub fn ImGui_PopID();
}
extern "C" {
    #[link_name = "\u{1}?GetID@ImGui@@YAIPEBD@Z"]
    pub fn ImGui_GetID(str_id: *const ::std::os::raw::c_char) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?GetID@ImGui@@YAIPEBD0@Z"]
    pub fn ImGui_GetID1(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?GetID@ImGui@@YAIPEBX@Z"]
    pub fn ImGui_GetID2(ptr_id: *const ::std::os::raw::c_void) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?GetID@ImGui@@YAIH@Z"]
    pub fn ImGui_GetID3(int_id: ::std::os::raw::c_int) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?TextUnformatted@ImGui@@YAXPEBD0@Z"]
    pub fn ImGui_TextUnformatted(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?Text@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_Text(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?TextV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_TextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    #[link_name = "\u{1}?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ"]
    pub fn ImGui_TextColored(col: *const ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z"]
    pub fn ImGui_TextColoredV(
        col: *const ImVec4,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
extern "C" {
    #[link_name = "\u{1}?TextDisabled@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_TextDisabled(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?TextDisabledV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_TextDisabledV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    #[link_name = "\u{1}?TextWrapped@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_TextWrapped(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?TextWrappedV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_TextWrappedV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    #[link_name = "\u{1}?LabelText@ImGui@@YAXPEBD0ZZ"]
    pub fn ImGui_LabelText(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}?LabelTextV@ImGui@@YAXPEBD0PEAD@Z"]
    pub fn ImGui_LabelTextV(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
extern "C" {
    #[link_name = "\u{1}?BulletText@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_BulletText(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?BulletTextV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_BulletTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    #[link_name = "\u{1}?SeparatorText@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_SeparatorText(label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z"]
    pub fn ImGui_Button(label: *const ::std::os::raw::c_char, size: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SmallButton@ImGui@@YA_NPEBD@Z"]
    pub fn ImGui_SmallButton(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z"]
    pub fn ImGui_InvisibleButton(
        str_id: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ArrowButton@ImGui@@YA_NPEBDW4ImGuiDir@@@Z"]
    pub fn ImGui_ArrowButton(str_id: *const ::std::os::raw::c_char, dir: ImGuiDir) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Checkbox@ImGui@@YA_NPEBDPEA_N@Z"]
    pub fn ImGui_Checkbox(label: *const ::std::os::raw::c_char, v: *mut bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z"]
    pub fn ImGui_CheckboxFlags(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_int,
        flags_value: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?CheckboxFlags@ImGui@@YA_NPEBDPEAII@Z"]
    pub fn ImGui_CheckboxFlags1(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_uint,
        flags_value: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?RadioButton@ImGui@@YA_NPEBD_N@Z"]
    pub fn ImGui_RadioButton(label: *const ::std::os::raw::c_char, active: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?RadioButton@ImGui@@YA_NPEBDPEAHH@Z"]
    pub fn ImGui_RadioButton1(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_button: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z"]
    pub fn ImGui_ProgressBar(
        fraction: f32,
        size_arg: *const ImVec2,
        overlay: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?Bullet@ImGui@@YAXXZ"]
    pub fn ImGui_Bullet();
}
extern "C" {
    #[link_name = "\u{1}?TextLink@ImGui@@YA_NPEBD@Z"]
    pub fn ImGui_TextLink(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TextLinkOpenURL@ImGui@@YAXPEBD0@Z"]
    pub fn ImGui_TextLinkOpenURL(
        label: *const ::std::os::raw::c_char,
        url: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z"]
    pub fn ImGui_Image(
        user_texture_id: ImTextureID,
        image_size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
        tint_col: *const ImVec4,
        border_col: *const ImVec4,
    );
}
extern "C" {
    #[link_name = "\u{1}?ImageButton@ImGui@@YA_NPEBDPEAXAEBUImVec2@@22AEBUImVec4@@3@Z"]
    pub fn ImGui_ImageButton(
        str_id: *const ::std::os::raw::c_char,
        user_texture_id: ImTextureID,
        image_size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
        bg_col: *const ImVec4,
        tint_col: *const ImVec4,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginCombo@ImGui@@YA_NPEBD0H@Z"]
    pub fn ImGui_BeginCombo(
        label: *const ::std::os::raw::c_char,
        preview_value: *const ::std::os::raw::c_char,
        flags: ImGuiComboFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndCombo@ImGui@@YAXXZ"]
    pub fn ImGui_EndCombo();
}
extern "C" {
    #[link_name = "\u{1}?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z"]
    pub fn ImGui_Combo(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Combo@ImGui@@YA_NPEBDPEAH0H@Z"]
    pub fn ImGui_Combo1(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_separated_by_zeros: *const ::std::os::raw::c_char,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Combo@ImGui@@YA_NPEBDPEAHP6APEBDPEAXH@Z2HH@Z"]
    pub fn ImGui_Combo2(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        getter: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z"]
    pub fn ImGui_DragFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z"]
    pub fn ImGui_DragFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0H@Z"]
    pub fn ImGui_DragFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0H@Z"]
    pub fn ImGui_DragFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z"]
    pub fn ImGui_DragFloatRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut f32,
        v_current_max: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z"]
    pub fn ImGui_DragInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragInt2@ImGui@@YA_NPEBDQEAHMHH0H@Z"]
    pub fn ImGui_DragInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragInt3@ImGui@@YA_NPEBDQEAHMHH0H@Z"]
    pub fn ImGui_DragInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragInt4@ImGui@@YA_NPEBDQEAHMHH0H@Z"]
    pub fn ImGui_DragInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00H@Z"]
    pub fn ImGui_DragIntRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut ::std::os::raw::c_int,
        v_current_max: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z"]
    pub fn ImGui_DragScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z"]
    pub fn ImGui_DragScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z"]
    pub fn ImGui_SliderFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z"]
    pub fn ImGui_SliderFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0H@Z"]
    pub fn ImGui_SliderFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0H@Z"]
    pub fn ImGui_SliderFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z"]
    pub fn ImGui_SliderAngle(
        label: *const ::std::os::raw::c_char,
        v_rad: *mut f32,
        v_degrees_min: f32,
        v_degrees_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z"]
    pub fn ImGui_SliderInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderInt2@ImGui@@YA_NPEBDQEAHHH0H@Z"]
    pub fn ImGui_SliderInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderInt3@ImGui@@YA_NPEBDQEAHHH0H@Z"]
    pub fn ImGui_SliderInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderInt4@ImGui@@YA_NPEBDQEAHHH0H@Z"]
    pub fn ImGui_SliderInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z"]
    pub fn ImGui_SliderScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z"]
    pub fn ImGui_SliderScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z"]
    pub fn ImGui_VSliderFloat(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0H@Z"]
    pub fn ImGui_VSliderInt(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z"]
    pub fn ImGui_VSliderScalar(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z"]
    pub fn ImGui_InputText(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z"]
    pub fn ImGui_InputTextMultiline(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        size: *const ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z"]
    pub fn ImGui_InputTextWithHint(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z"]
    pub fn ImGui_InputFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        step: f32,
        step_fast: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputFloat2@ImGui@@YA_NPEBDQEAM0H@Z"]
    pub fn ImGui_InputFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z"]
    pub fn ImGui_InputFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputFloat4@ImGui@@YA_NPEBDQEAM0H@Z"]
    pub fn ImGui_InputFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z"]
    pub fn ImGui_InputInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        step_fast: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputInt2@ImGui@@YA_NPEBDQEAHH@Z"]
    pub fn ImGui_InputInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputInt3@ImGui@@YA_NPEBDQEAHH@Z"]
    pub fn ImGui_InputInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputInt4@ImGui@@YA_NPEBDQEAHH@Z"]
    pub fn ImGui_InputInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputDouble@ImGui@@YA_NPEBDPEANNN0H@Z"]
    pub fn ImGui_InputDouble(
        label: *const ::std::os::raw::c_char,
        v: *mut f64,
        step: f64,
        step_fast: f64,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z"]
    pub fn ImGui_InputScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z"]
    pub fn ImGui_InputScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z"]
    pub fn ImGui_ColorEdit3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z"]
    pub fn ImGui_ColorEdit4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z"]
    pub fn ImGui_ColorPicker3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z"]
    pub fn ImGui_ColorPicker4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
        ref_col: *const f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HAEBUImVec2@@@Z"]
    pub fn ImGui_ColorButton(
        desc_id: *const ::std::os::raw::c_char,
        col: *const ImVec4,
        flags: ImGuiColorEditFlags,
        size: *const ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetColorEditOptions@ImGui@@YAXH@Z"]
    pub fn ImGui_SetColorEditOptions(flags: ImGuiColorEditFlags);
}
extern "C" {
    #[link_name = "\u{1}?TreeNode@ImGui@@YA_NPEBD@Z"]
    pub fn ImGui_TreeNode(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNode@ImGui@@YA_NPEBD0ZZ"]
    pub fn ImGui_TreeNode1(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNode@ImGui@@YA_NPEBXPEBDZZ"]
    pub fn ImGui_TreeNode2(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeV@ImGui@@YA_NPEBD0PEAD@Z"]
    pub fn ImGui_TreeNodeV(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeV@ImGui@@YA_NPEBXPEBDPEAD@Z"]
    pub fn ImGui_TreeNodeV1(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeEx@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_TreeNodeEx(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ"]
    pub fn ImGui_TreeNodeEx1(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ"]
    pub fn ImGui_TreeNodeEx2(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z"]
    pub fn ImGui_TreeNodeExV(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z"]
    pub fn ImGui_TreeNodeExV1(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TreePush@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_TreePush(str_id: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?TreePush@ImGui@@YAXPEBX@Z"]
    pub fn ImGui_TreePush1(ptr_id: *const ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?TreePop@ImGui@@YAXXZ"]
    pub fn ImGui_TreePop();
}
extern "C" {
    #[link_name = "\u{1}?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ"]
    pub fn ImGui_GetTreeNodeToLabelSpacing() -> f32;
}
extern "C" {
    #[link_name = "\u{1}?CollapsingHeader@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_CollapsingHeader(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z"]
    pub fn ImGui_CollapsingHeader1(
        label: *const ::std::os::raw::c_char,
        p_visible: *mut bool,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetNextItemOpen@ImGui@@YAX_NH@Z"]
    pub fn ImGui_SetNextItemOpen(is_open: bool, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetNextItemStorageID@ImGui@@YAXI@Z"]
    pub fn ImGui_SetNextItemStorageID(storage_id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z"]
    pub fn ImGui_Selectable(
        label: *const ::std::os::raw::c_char,
        selected: bool,
        flags: ImGuiSelectableFlags,
        size: *const ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z"]
    pub fn ImGui_Selectable1(
        label: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        flags: ImGuiSelectableFlags,
        size: *const ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginMultiSelect@ImGui@@YAPEAUImGuiMultiSelectIO@@HHH@Z"]
    pub fn ImGui_BeginMultiSelect(
        flags: ImGuiMultiSelectFlags,
        selection_size: ::std::os::raw::c_int,
        items_count: ::std::os::raw::c_int,
    ) -> *mut ImGuiMultiSelectIO;
}
extern "C" {
    #[link_name = "\u{1}?EndMultiSelect@ImGui@@YAPEAUImGuiMultiSelectIO@@XZ"]
    pub fn ImGui_EndMultiSelect() -> *mut ImGuiMultiSelectIO;
}
extern "C" {
    #[link_name = "\u{1}?SetNextItemSelectionUserData@ImGui@@YAX_J@Z"]
    pub fn ImGui_SetNextItemSelectionUserData(selection_user_data: ImGuiSelectionUserData);
}
extern "C" {
    #[link_name = "\u{1}?IsItemToggledSelection@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemToggledSelection() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z"]
    pub fn ImGui_BeginListBox(label: *const ::std::os::raw::c_char, size: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndListBox@ImGui@@YAXXZ"]
    pub fn ImGui_EndListBox();
}
extern "C" {
    #[link_name = "\u{1}?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z"]
    pub fn ImGui_ListBox(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ListBox@ImGui@@YA_NPEBDPEAHP6APEBDPEAXH@Z2HH@Z"]
    pub fn ImGui_ListBox1(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        getter: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z"]
    pub fn ImGui_PlotLines(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z"]
    pub fn ImGui_PlotLines1(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z"]
    pub fn ImGui_PlotHistogram(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z"]
    pub fn ImGui_PlotHistogram1(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}?Value@ImGui@@YAXPEBD_N@Z"]
    pub fn ImGui_Value(prefix: *const ::std::os::raw::c_char, b: bool);
}
extern "C" {
    #[link_name = "\u{1}?Value@ImGui@@YAXPEBDH@Z"]
    pub fn ImGui_Value1(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?Value@ImGui@@YAXPEBDI@Z"]
    pub fn ImGui_Value2(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}?Value@ImGui@@YAXPEBDM0@Z"]
    pub fn ImGui_Value3(
        prefix: *const ::std::os::raw::c_char,
        v: f32,
        float_format: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?BeginMenuBar@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginMenuBar() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndMenuBar@ImGui@@YAXXZ"]
    pub fn ImGui_EndMenuBar();
}
extern "C" {
    #[link_name = "\u{1}?BeginMainMenuBar@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginMainMenuBar() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndMainMenuBar@ImGui@@YAXXZ"]
    pub fn ImGui_EndMainMenuBar();
}
extern "C" {
    #[link_name = "\u{1}?BeginMenu@ImGui@@YA_NPEBD_N@Z"]
    pub fn ImGui_BeginMenu(label: *const ::std::os::raw::c_char, enabled: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndMenu@ImGui@@YAXXZ"]
    pub fn ImGui_EndMenu();
}
extern "C" {
    #[link_name = "\u{1}?MenuItem@ImGui@@YA_NPEBD0_N1@Z"]
    pub fn ImGui_MenuItem(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z"]
    pub fn ImGui_MenuItem1(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginTooltip@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginTooltip() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndTooltip@ImGui@@YAXXZ"]
    pub fn ImGui_EndTooltip();
}
extern "C" {
    #[link_name = "\u{1}?SetTooltip@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_SetTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?SetTooltipV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_SetTooltipV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    #[link_name = "\u{1}?BeginItemTooltip@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginItemTooltip() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetItemTooltip@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_SetItemTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?SetItemTooltipV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_SetItemTooltipV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    #[link_name = "\u{1}?BeginPopup@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginPopup(str_id: *const ::std::os::raw::c_char, flags: ImGuiWindowFlags)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginPopupModal@ImGui@@YA_NPEBDPEA_NH@Z"]
    pub fn ImGui_BeginPopupModal(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndPopup@ImGui@@YAXXZ"]
    pub fn ImGui_EndPopup();
}
extern "C" {
    #[link_name = "\u{1}?OpenPopup@ImGui@@YAXPEBDH@Z"]
    pub fn ImGui_OpenPopup(str_id: *const ::std::os::raw::c_char, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    #[link_name = "\u{1}?OpenPopup@ImGui@@YAXIH@Z"]
    pub fn ImGui_OpenPopup1(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    #[link_name = "\u{1}?OpenPopupOnItemClick@ImGui@@YAXPEBDH@Z"]
    pub fn ImGui_OpenPopupOnItemClick(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}?CloseCurrentPopup@ImGui@@YAXXZ"]
    pub fn ImGui_CloseCurrentPopup();
}
extern "C" {
    #[link_name = "\u{1}?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginPopupContextItem(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginPopupContextWindow@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginPopupContextWindow(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginPopupContextVoid@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginPopupContextVoid(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsPopupOpen@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_IsPopupOpen(str_id: *const ::std::os::raw::c_char, flags: ImGuiPopupFlags)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z"]
    pub fn ImGui_BeginTable(
        str_id: *const ::std::os::raw::c_char,
        columns: ::std::os::raw::c_int,
        flags: ImGuiTableFlags,
        outer_size: *const ImVec2,
        inner_width: f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndTable@ImGui@@YAXXZ"]
    pub fn ImGui_EndTable();
}
extern "C" {
    #[link_name = "\u{1}?TableNextRow@ImGui@@YAXHM@Z"]
    pub fn ImGui_TableNextRow(row_flags: ImGuiTableRowFlags, min_row_height: f32);
}
extern "C" {
    #[link_name = "\u{1}?TableNextColumn@ImGui@@YA_NXZ"]
    pub fn ImGui_TableNextColumn() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TableSetColumnIndex@ImGui@@YA_NH@Z"]
    pub fn ImGui_TableSetColumnIndex(column_n: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?TableSetupColumn@ImGui@@YAXPEBDHMI@Z"]
    pub fn ImGui_TableSetupColumn(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTableColumnFlags,
        init_width_or_weight: f32,
        user_id: ImGuiID,
    );
}
extern "C" {
    #[link_name = "\u{1}?TableSetupScrollFreeze@ImGui@@YAXHH@Z"]
    pub fn ImGui_TableSetupScrollFreeze(cols: ::std::os::raw::c_int, rows: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?TableHeader@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_TableHeader(label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?TableHeadersRow@ImGui@@YAXXZ"]
    pub fn ImGui_TableHeadersRow();
}
extern "C" {
    #[link_name = "\u{1}?TableAngledHeadersRow@ImGui@@YAXXZ"]
    pub fn ImGui_TableAngledHeadersRow();
}
extern "C" {
    #[link_name = "\u{1}?TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ"]
    pub fn ImGui_TableGetSortSpecs() -> *mut ImGuiTableSortSpecs;
}
extern "C" {
    #[link_name = "\u{1}?TableGetColumnCount@ImGui@@YAHXZ"]
    pub fn ImGui_TableGetColumnCount() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?TableGetColumnIndex@ImGui@@YAHXZ"]
    pub fn ImGui_TableGetColumnIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?TableGetRowIndex@ImGui@@YAHXZ"]
    pub fn ImGui_TableGetRowIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?TableGetColumnName@ImGui@@YAPEBDH@Z"]
    pub fn ImGui_TableGetColumnName(
        column_n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?TableGetColumnFlags@ImGui@@YAHH@Z"]
    pub fn ImGui_TableGetColumnFlags(column_n: ::std::os::raw::c_int) -> ImGuiTableColumnFlags;
}
extern "C" {
    #[link_name = "\u{1}?TableSetColumnEnabled@ImGui@@YAXH_N@Z"]
    pub fn ImGui_TableSetColumnEnabled(column_n: ::std::os::raw::c_int, v: bool);
}
extern "C" {
    #[link_name = "\u{1}?TableGetHoveredColumn@ImGui@@YAHXZ"]
    pub fn ImGui_TableGetHoveredColumn() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?TableSetBgColor@ImGui@@YAXHIH@Z"]
    pub fn ImGui_TableSetBgColor(
        target: ImGuiTableBgTarget,
        color: ImU32,
        column_n: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?Columns@ImGui@@YAXHPEBD_N@Z"]
    pub fn ImGui_Columns(
        count: ::std::os::raw::c_int,
        id: *const ::std::os::raw::c_char,
        borders: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?NextColumn@ImGui@@YAXXZ"]
    pub fn ImGui_NextColumn();
}
extern "C" {
    #[link_name = "\u{1}?GetColumnIndex@ImGui@@YAHXZ"]
    pub fn ImGui_GetColumnIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?GetColumnWidth@ImGui@@YAMH@Z"]
    pub fn ImGui_GetColumnWidth(column_index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?SetColumnWidth@ImGui@@YAXHM@Z"]
    pub fn ImGui_SetColumnWidth(column_index: ::std::os::raw::c_int, width: f32);
}
extern "C" {
    #[link_name = "\u{1}?GetColumnOffset@ImGui@@YAMH@Z"]
    pub fn ImGui_GetColumnOffset(column_index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?SetColumnOffset@ImGui@@YAXHM@Z"]
    pub fn ImGui_SetColumnOffset(column_index: ::std::os::raw::c_int, offset_x: f32);
}
extern "C" {
    #[link_name = "\u{1}?GetColumnsCount@ImGui@@YAHXZ"]
    pub fn ImGui_GetColumnsCount() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?BeginTabBar@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginTabBar(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTabBarFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndTabBar@ImGui@@YAXXZ"]
    pub fn ImGui_EndTabBar();
}
extern "C" {
    #[link_name = "\u{1}?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z"]
    pub fn ImGui_BeginTabItem(
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndTabItem@ImGui@@YAXXZ"]
    pub fn ImGui_EndTabItem();
}
extern "C" {
    #[link_name = "\u{1}?TabItemButton@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_TabItemButton(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetTabItemClosed@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_SetTabItemClosed(tab_or_docked_window_label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?DockSpace@ImGui@@YAIIAEBUImVec2@@HPEBUImGuiWindowClass@@@Z"]
    pub fn ImGui_DockSpace(
        dockspace_id: ImGuiID,
        size: *const ImVec2,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?DockSpaceOverViewport@ImGui@@YAIIPEBUImGuiViewport@@HPEBUImGuiWindowClass@@@Z"]
    pub fn ImGui_DockSpaceOverViewport(
        dockspace_id: ImGuiID,
        viewport: *const ImGuiViewport,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowDockID@ImGui@@YAXIH@Z"]
    pub fn ImGui_SetNextWindowDockID(dock_id: ImGuiID, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}?SetNextWindowClass@ImGui@@YAXPEBUImGuiWindowClass@@@Z"]
    pub fn ImGui_SetNextWindowClass(window_class: *const ImGuiWindowClass);
}
extern "C" {
    #[link_name = "\u{1}?GetWindowDockID@ImGui@@YAIXZ"]
    pub fn ImGui_GetWindowDockID() -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?IsWindowDocked@ImGui@@YA_NXZ"]
    pub fn ImGui_IsWindowDocked() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?LogToTTY@ImGui@@YAXH@Z"]
    pub fn ImGui_LogToTTY(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?LogToFile@ImGui@@YAXHPEBD@Z"]
    pub fn ImGui_LogToFile(
        auto_open_depth: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?LogToClipboard@ImGui@@YAXH@Z"]
    pub fn ImGui_LogToClipboard(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?LogFinish@ImGui@@YAXXZ"]
    pub fn ImGui_LogFinish();
}
extern "C" {
    #[link_name = "\u{1}?LogButtons@ImGui@@YAXXZ"]
    pub fn ImGui_LogButtons();
}
extern "C" {
    #[link_name = "\u{1}?LogText@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_LogText(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?LogTextV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_LogTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    #[link_name = "\u{1}?BeginDragDropSource@ImGui@@YA_NH@Z"]
    pub fn ImGui_BeginDragDropSource(flags: ImGuiDragDropFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetDragDropPayload@ImGui@@YA_NPEBDPEBX_KH@Z"]
    pub fn ImGui_SetDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        sz: usize,
        cond: ImGuiCond,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndDragDropSource@ImGui@@YAXXZ"]
    pub fn ImGui_EndDragDropSource();
}
extern "C" {
    #[link_name = "\u{1}?BeginDragDropTarget@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginDragDropTarget() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?AcceptDragDropPayload@ImGui@@YAPEBUImGuiPayload@@PEBDH@Z"]
    pub fn ImGui_AcceptDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        flags: ImGuiDragDropFlags,
    ) -> *const ImGuiPayload;
}
extern "C" {
    #[link_name = "\u{1}?EndDragDropTarget@ImGui@@YAXXZ"]
    pub fn ImGui_EndDragDropTarget();
}
extern "C" {
    #[link_name = "\u{1}?GetDragDropPayload@ImGui@@YAPEBUImGuiPayload@@XZ"]
    pub fn ImGui_GetDragDropPayload() -> *const ImGuiPayload;
}
extern "C" {
    #[link_name = "\u{1}?BeginDisabled@ImGui@@YAX_N@Z"]
    pub fn ImGui_BeginDisabled(disabled: bool);
}
extern "C" {
    #[link_name = "\u{1}?EndDisabled@ImGui@@YAXXZ"]
    pub fn ImGui_EndDisabled();
}
extern "C" {
    #[link_name = "\u{1}?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z"]
    pub fn ImGui_PushClipRect(
        clip_rect_min: *const ImVec2,
        clip_rect_max: *const ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?PopClipRect@ImGui@@YAXXZ"]
    pub fn ImGui_PopClipRect();
}
extern "C" {
    #[link_name = "\u{1}?SetItemDefaultFocus@ImGui@@YAXXZ"]
    pub fn ImGui_SetItemDefaultFocus();
}
extern "C" {
    #[link_name = "\u{1}?SetKeyboardFocusHere@ImGui@@YAXH@Z"]
    pub fn ImGui_SetKeyboardFocusHere(offset: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?SetNextItemAllowOverlap@ImGui@@YAXXZ"]
    pub fn ImGui_SetNextItemAllowOverlap();
}
extern "C" {
    #[link_name = "\u{1}?IsItemHovered@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsItemHovered(flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemActive@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemActive() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemFocused@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemFocused() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemClicked@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsItemClicked(mouse_button: ImGuiMouseButton) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemVisible@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemVisible() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemEdited@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemEdited() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemActivated@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemActivated() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemDeactivated@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemDeactivated() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemDeactivatedAfterEdit@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemDeactivatedAfterEdit() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsItemToggledOpen@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemToggledOpen() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsAnyItemHovered@ImGui@@YA_NXZ"]
    pub fn ImGui_IsAnyItemHovered() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsAnyItemActive@ImGui@@YA_NXZ"]
    pub fn ImGui_IsAnyItemActive() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsAnyItemFocused@ImGui@@YA_NXZ"]
    pub fn ImGui_IsAnyItemFocused() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetItemID@ImGui@@YAIXZ"]
    pub fn ImGui_GetItemID() -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetItemRectMin() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetItemRectMax() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetItemRectSize() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ"]
    pub fn ImGui_GetMainViewport() -> *mut ImGuiViewport;
}
extern "C" {
    #[link_name = "\u{1}?GetBackgroundDrawList@ImGui@@YAPEAUImDrawList@@PEAUImGuiViewport@@@Z"]
    pub fn ImGui_GetBackgroundDrawList(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
extern "C" {
    #[link_name = "\u{1}?GetForegroundDrawList@ImGui@@YAPEAUImDrawList@@PEAUImGuiViewport@@@Z"]
    pub fn ImGui_GetForegroundDrawList(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
extern "C" {
    #[link_name = "\u{1}?IsRectVisible@ImGui@@YA_NAEBUImVec2@@@Z"]
    pub fn ImGui_IsRectVisible(size: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsRectVisible@ImGui@@YA_NAEBUImVec2@@0@Z"]
    pub fn ImGui_IsRectVisible1(rect_min: *const ImVec2, rect_max: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetTime@ImGui@@YANXZ"]
    pub fn ImGui_GetTime() -> f64;
}
extern "C" {
    #[link_name = "\u{1}?GetFrameCount@ImGui@@YAHXZ"]
    pub fn ImGui_GetFrameCount() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?GetDrawListSharedData@ImGui@@YAPEAUImDrawListSharedData@@XZ"]
    pub fn ImGui_GetDrawListSharedData() -> *mut ImDrawListSharedData;
}
extern "C" {
    #[link_name = "\u{1}?GetStyleColorName@ImGui@@YAPEBDH@Z"]
    pub fn ImGui_GetStyleColorName(idx: ImGuiCol) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?SetStateStorage@ImGui@@YAXPEAUImGuiStorage@@@Z"]
    pub fn ImGui_SetStateStorage(storage: *mut ImGuiStorage);
}
extern "C" {
    #[link_name = "\u{1}?GetStateStorage@ImGui@@YAPEAUImGuiStorage@@XZ"]
    pub fn ImGui_GetStateStorage() -> *mut ImGuiStorage;
}
extern "C" {
    #[link_name = "\u{1}?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z"]
    pub fn ImGui_CalcTextSize(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_double_hash: bool,
        wrap_width: f32,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?ColorConvertU32ToFloat4@ImGui@@YA?AUImVec4@@I@Z"]
    pub fn ImGui_ColorConvertU32ToFloat4(in_: ImU32) -> ImVec4;
}
extern "C" {
    #[link_name = "\u{1}?ColorConvertFloat4ToU32@ImGui@@YAIAEBUImVec4@@@Z"]
    pub fn ImGui_ColorConvertFloat4ToU32(in_: *const ImVec4) -> ImU32;
}
extern "C" {
    #[link_name = "\u{1}?ColorConvertRGBtoHSV@ImGui@@YAXMMMAEAM00@Z"]
    pub fn ImGui_ColorConvertRGBtoHSV(
        r: f32,
        g: f32,
        b: f32,
        out_h: *mut f32,
        out_s: *mut f32,
        out_v: *mut f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z"]
    pub fn ImGui_ColorConvertHSVtoRGB(
        h: f32,
        s: f32,
        v: f32,
        out_r: *mut f32,
        out_g: *mut f32,
        out_b: *mut f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?IsKeyDown@ImGui@@YA_NW4ImGuiKey@@@Z"]
    pub fn ImGui_IsKeyDown(key: ImGuiKey) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsKeyPressed@ImGui@@YA_NW4ImGuiKey@@_N@Z"]
    pub fn ImGui_IsKeyPressed(key: ImGuiKey, repeat: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsKeyReleased@ImGui@@YA_NW4ImGuiKey@@@Z"]
    pub fn ImGui_IsKeyReleased(key: ImGuiKey) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsKeyChordPressed@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsKeyChordPressed(key_chord: ImGuiKeyChord) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetKeyPressedAmount@ImGui@@YAHW4ImGuiKey@@MM@Z"]
    pub fn ImGui_GetKeyPressedAmount(
        key: ImGuiKey,
        repeat_delay: f32,
        rate: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?GetKeyName@ImGui@@YAPEBDW4ImGuiKey@@@Z"]
    pub fn ImGui_GetKeyName(key: ImGuiKey) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?SetNextFrameWantCaptureKeyboard@ImGui@@YAX_N@Z"]
    pub fn ImGui_SetNextFrameWantCaptureKeyboard(want_capture_keyboard: bool);
}
extern "C" {
    #[link_name = "\u{1}?Shortcut@ImGui@@YA_NHH@Z"]
    pub fn ImGui_Shortcut(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetNextItemShortcut@ImGui@@YAXHH@Z"]
    pub fn ImGui_SetNextItemShortcut(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags);
}
extern "C" {
    #[link_name = "\u{1}?SetItemKeyOwner@ImGui@@YAXW4ImGuiKey@@@Z"]
    pub fn ImGui_SetItemKeyOwner(key: ImGuiKey);
}
extern "C" {
    #[link_name = "\u{1}?IsMouseDown@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsMouseDown(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsMouseClicked@ImGui@@YA_NH_N@Z"]
    pub fn ImGui_IsMouseClicked(button: ImGuiMouseButton, repeat: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsMouseReleased@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsMouseReleased(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsMouseDoubleClicked@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsMouseDoubleClicked(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetMouseClickedCount@ImGui@@YAHH@Z"]
    pub fn ImGui_GetMouseClickedCount(button: ImGuiMouseButton) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?IsMouseHoveringRect@ImGui@@YA_NAEBUImVec2@@0_N@Z"]
    pub fn ImGui_IsMouseHoveringRect(
        r_min: *const ImVec2,
        r_max: *const ImVec2,
        clip: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsMousePosValid@ImGui@@YA_NPEBUImVec2@@@Z"]
    pub fn ImGui_IsMousePosValid(mouse_pos: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IsAnyMouseDown@ImGui@@YA_NXZ"]
    pub fn ImGui_IsAnyMouseDown() -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetMousePos@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetMousePos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetMousePosOnOpeningCurrentPopup@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetMousePosOnOpeningCurrentPopup() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?IsMouseDragging@ImGui@@YA_NHM@Z"]
    pub fn ImGui_IsMouseDragging(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z"]
    pub fn ImGui_GetMouseDragDelta(button: ImGuiMouseButton, lock_threshold: f32) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?ResetMouseDragDelta@ImGui@@YAXH@Z"]
    pub fn ImGui_ResetMouseDragDelta(button: ImGuiMouseButton);
}
extern "C" {
    #[link_name = "\u{1}?GetMouseCursor@ImGui@@YAHXZ"]
    pub fn ImGui_GetMouseCursor() -> ImGuiMouseCursor;
}
extern "C" {
    #[link_name = "\u{1}?SetMouseCursor@ImGui@@YAXH@Z"]
    pub fn ImGui_SetMouseCursor(cursor_type: ImGuiMouseCursor);
}
extern "C" {
    #[link_name = "\u{1}?SetNextFrameWantCaptureMouse@ImGui@@YAX_N@Z"]
    pub fn ImGui_SetNextFrameWantCaptureMouse(want_capture_mouse: bool);
}
extern "C" {
    #[link_name = "\u{1}?GetClipboardText@ImGui@@YAPEBDXZ"]
    pub fn ImGui_GetClipboardText() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?SetClipboardText@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_SetClipboardText(text: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?LoadIniSettingsFromDisk@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_LoadIniSettingsFromDisk(ini_filename: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?LoadIniSettingsFromMemory@ImGui@@YAXPEBD_K@Z"]
    pub fn ImGui_LoadIniSettingsFromMemory(
        ini_data: *const ::std::os::raw::c_char,
        ini_size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}?SaveIniSettingsToDisk@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_SaveIniSettingsToDisk(ini_filename: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?SaveIniSettingsToMemory@ImGui@@YAPEBDPEA_K@Z"]
    pub fn ImGui_SaveIniSettingsToMemory(out_ini_size: *mut usize)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?DebugTextEncoding@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_DebugTextEncoding(text: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?DebugFlashStyleColor@ImGui@@YAXH@Z"]
    pub fn ImGui_DebugFlashStyleColor(idx: ImGuiCol);
}
extern "C" {
    #[link_name = "\u{1}?DebugStartItemPicker@ImGui@@YAXXZ"]
    pub fn ImGui_DebugStartItemPicker();
}
extern "C" {
    #[link_name = "\u{1}?DebugCheckVersionAndDataLayout@ImGui@@YA_NPEBD_K11111@Z"]
    pub fn ImGui_DebugCheckVersionAndDataLayout(
        version_str: *const ::std::os::raw::c_char,
        sz_io: usize,
        sz_style: usize,
        sz_vec2: usize,
        sz_vec4: usize,
        sz_drawvert: usize,
        sz_drawidx: usize,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?DebugLog@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_DebugLog(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}?DebugLogV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_DebugLogV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    #[link_name = "\u{1}?SetAllocatorFunctions@ImGui@@YAXP6APEAX_KPEAX@ZP6AX11@Z1@Z"]
    pub fn ImGui_SetAllocatorFunctions(
        alloc_func: ImGuiMemAllocFunc,
        free_func: ImGuiMemFreeFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?GetAllocatorFunctions@ImGui@@YAXPEAP6APEAX_KPEAX@ZPEAP6AX11@ZPEAPEAX@Z"]
    pub fn ImGui_GetAllocatorFunctions(
        p_alloc_func: *mut ImGuiMemAllocFunc,
        p_free_func: *mut ImGuiMemFreeFunc,
        p_user_data: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?MemAlloc@ImGui@@YAPEAX_K@Z"]
    pub fn ImGui_MemAlloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}?MemFree@ImGui@@YAXPEAX@Z"]
    pub fn ImGui_MemFree(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}?UpdatePlatformWindows@ImGui@@YAXXZ"]
    pub fn ImGui_UpdatePlatformWindows();
}
extern "C" {
    #[link_name = "\u{1}?RenderPlatformWindowsDefault@ImGui@@YAXPEAX0@Z"]
    pub fn ImGui_RenderPlatformWindowsDefault(
        platform_render_arg: *mut ::std::os::raw::c_void,
        renderer_render_arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?DestroyPlatformWindows@ImGui@@YAXXZ"]
    pub fn ImGui_DestroyPlatformWindows();
}
extern "C" {
    #[link_name = "\u{1}?FindViewportByID@ImGui@@YAPEAUImGuiViewport@@I@Z"]
    pub fn ImGui_FindViewportByID(id: ImGuiID) -> *mut ImGuiViewport;
}
extern "C" {
    #[link_name = "\u{1}?FindViewportByPlatformHandle@ImGui@@YAPEAUImGuiViewport@@PEAX@Z"]
    pub fn ImGui_FindViewportByPlatformHandle(
        platform_handle: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiViewport;
}
extern "C" {
    #[link_name = "\u{1}?GetContentRegionMax@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetContentRegionMax() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowContentRegionMin@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetWindowContentRegionMin() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?GetWindowContentRegionMax@ImGui@@YA?AUImVec2@@XZ"]
    pub fn ImGui_GetWindowContentRegionMax() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z"]
    pub fn ImGui_Combo3(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        old_callback: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z"]
    pub fn ImGui_ListBox2(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        old_callback: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetItemAllowOverlap@ImGui@@YAXXZ"]
    pub fn ImGui_SetItemAllowOverlap();
}
extern "C" {
    #[link_name = "\u{1}?GetKeyIndex@ImGui@@YA?AW4ImGuiKey@@W42@@Z"]
    pub fn ImGui_GetKeyIndex(key: ImGuiKey) -> ImGuiKey;
}
pub const ImGuiWindowFlags__ImGuiWindowFlags_None: ImGuiWindowFlags_ = 0;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoTitleBar: ImGuiWindowFlags_ = 1;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoResize: ImGuiWindowFlags_ = 2;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMove: ImGuiWindowFlags_ = 4;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollbar: ImGuiWindowFlags_ = 8;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollWithMouse: ImGuiWindowFlags_ = 16;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoCollapse: ImGuiWindowFlags_ = 32;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysAutoResize: ImGuiWindowFlags_ = 64;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBackground: ImGuiWindowFlags_ = 128;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoSavedSettings: ImGuiWindowFlags_ = 256;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMouseInputs: ImGuiWindowFlags_ = 512;
pub const ImGuiWindowFlags__ImGuiWindowFlags_MenuBar: ImGuiWindowFlags_ = 1024;
pub const ImGuiWindowFlags__ImGuiWindowFlags_HorizontalScrollbar: ImGuiWindowFlags_ = 2048;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoFocusOnAppearing: ImGuiWindowFlags_ = 4096;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBringToFrontOnFocus: ImGuiWindowFlags_ = 8192;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysVerticalScrollbar: ImGuiWindowFlags_ = 16384;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysHorizontalScrollbar: ImGuiWindowFlags_ = 32768;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavInputs: ImGuiWindowFlags_ = 65536;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavFocus: ImGuiWindowFlags_ = 131072;
pub const ImGuiWindowFlags__ImGuiWindowFlags_UnsavedDocument: ImGuiWindowFlags_ = 262144;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDocking: ImGuiWindowFlags_ = 524288;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNav: ImGuiWindowFlags_ = 196608;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDecoration: ImGuiWindowFlags_ = 43;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoInputs: ImGuiWindowFlags_ = 197120;
pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildWindow: ImGuiWindowFlags_ = 16777216;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Tooltip: ImGuiWindowFlags_ = 33554432;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Popup: ImGuiWindowFlags_ = 67108864;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Modal: ImGuiWindowFlags_ = 134217728;
pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildMenu: ImGuiWindowFlags_ = 268435456;
pub const ImGuiWindowFlags__ImGuiWindowFlags_DockNodeHost: ImGuiWindowFlags_ = 536870912;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysUseWindowPadding: ImGuiWindowFlags_ = 1073741824;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NavFlattened: ImGuiWindowFlags_ = -2147483648;
pub type ImGuiWindowFlags_ = ::std::os::raw::c_int;
pub const ImGuiChildFlags__ImGuiChildFlags_None: ImGuiChildFlags_ = 0;
pub const ImGuiChildFlags__ImGuiChildFlags_Borders: ImGuiChildFlags_ = 1;
pub const ImGuiChildFlags__ImGuiChildFlags_AlwaysUseWindowPadding: ImGuiChildFlags_ = 2;
pub const ImGuiChildFlags__ImGuiChildFlags_ResizeX: ImGuiChildFlags_ = 4;
pub const ImGuiChildFlags__ImGuiChildFlags_ResizeY: ImGuiChildFlags_ = 8;
pub const ImGuiChildFlags__ImGuiChildFlags_AutoResizeX: ImGuiChildFlags_ = 16;
pub const ImGuiChildFlags__ImGuiChildFlags_AutoResizeY: ImGuiChildFlags_ = 32;
pub const ImGuiChildFlags__ImGuiChildFlags_AlwaysAutoResize: ImGuiChildFlags_ = 64;
pub const ImGuiChildFlags__ImGuiChildFlags_FrameStyle: ImGuiChildFlags_ = 128;
pub const ImGuiChildFlags__ImGuiChildFlags_NavFlattened: ImGuiChildFlags_ = 256;
pub const ImGuiChildFlags__ImGuiChildFlags_Border: ImGuiChildFlags_ = 1;
pub type ImGuiChildFlags_ = ::std::os::raw::c_int;
pub const ImGuiItemFlags__ImGuiItemFlags_None: ImGuiItemFlags_ = 0;
pub const ImGuiItemFlags__ImGuiItemFlags_NoTabStop: ImGuiItemFlags_ = 1;
pub const ImGuiItemFlags__ImGuiItemFlags_NoNav: ImGuiItemFlags_ = 2;
pub const ImGuiItemFlags__ImGuiItemFlags_NoNavDefaultFocus: ImGuiItemFlags_ = 4;
pub const ImGuiItemFlags__ImGuiItemFlags_ButtonRepeat: ImGuiItemFlags_ = 8;
pub const ImGuiItemFlags__ImGuiItemFlags_AutoClosePopups: ImGuiItemFlags_ = 16;
pub const ImGuiItemFlags__ImGuiItemFlags_AllowDuplicateId: ImGuiItemFlags_ = 32;
pub type ImGuiItemFlags_ = ::std::os::raw::c_int;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_None: ImGuiInputTextFlags_ = 0;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsDecimal: ImGuiInputTextFlags_ = 1;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsHexadecimal: ImGuiInputTextFlags_ = 2;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsScientific: ImGuiInputTextFlags_ = 4;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsUppercase: ImGuiInputTextFlags_ = 8;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsNoBlank: ImGuiInputTextFlags_ = 16;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AllowTabInput: ImGuiInputTextFlags_ = 32;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_EnterReturnsTrue: ImGuiInputTextFlags_ = 64;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_EscapeClearsAll: ImGuiInputTextFlags_ = 128;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CtrlEnterForNewLine: ImGuiInputTextFlags_ = 256;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_ReadOnly: ImGuiInputTextFlags_ = 512;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_Password: ImGuiInputTextFlags_ = 1024;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AlwaysOverwrite: ImGuiInputTextFlags_ = 2048;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AutoSelectAll: ImGuiInputTextFlags_ = 4096;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_ParseEmptyRefVal: ImGuiInputTextFlags_ = 8192;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_DisplayEmptyRefVal: ImGuiInputTextFlags_ = 16384;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoHorizontalScroll: ImGuiInputTextFlags_ = 32768;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoUndoRedo: ImGuiInputTextFlags_ = 65536;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCompletion: ImGuiInputTextFlags_ =
    131072;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackHistory: ImGuiInputTextFlags_ = 262144;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackAlways: ImGuiInputTextFlags_ = 524288;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCharFilter: ImGuiInputTextFlags_ =
    1048576;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackResize: ImGuiInputTextFlags_ = 2097152;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackEdit: ImGuiInputTextFlags_ = 4194304;
pub type ImGuiInputTextFlags_ = ::std::os::raw::c_int;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_None: ImGuiTreeNodeFlags_ = 0;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Selected: ImGuiTreeNodeFlags_ = 1;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Framed: ImGuiTreeNodeFlags_ = 2;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_AllowOverlap: ImGuiTreeNodeFlags_ = 4;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoTreePushOnOpen: ImGuiTreeNodeFlags_ = 8;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoAutoOpenOnLog: ImGuiTreeNodeFlags_ = 16;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_DefaultOpen: ImGuiTreeNodeFlags_ = 32;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnDoubleClick: ImGuiTreeNodeFlags_ = 64;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnArrow: ImGuiTreeNodeFlags_ = 128;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Leaf: ImGuiTreeNodeFlags_ = 256;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Bullet: ImGuiTreeNodeFlags_ = 512;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_FramePadding: ImGuiTreeNodeFlags_ = 1024;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanAvailWidth: ImGuiTreeNodeFlags_ = 2048;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanFullWidth: ImGuiTreeNodeFlags_ = 4096;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanTextWidth: ImGuiTreeNodeFlags_ = 8192;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanAllColumns: ImGuiTreeNodeFlags_ = 16384;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NavLeftJumpsBackHere: ImGuiTreeNodeFlags_ = 32768;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_CollapsingHeader: ImGuiTreeNodeFlags_ = 26;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_AllowItemOverlap: ImGuiTreeNodeFlags_ = 4;
pub type ImGuiTreeNodeFlags_ = ::std::os::raw::c_int;
pub const ImGuiPopupFlags__ImGuiPopupFlags_None: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonLeft: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonRight: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonMiddle: ImGuiPopupFlags_ = 2;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonMask_: ImGuiPopupFlags_ = 31;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonDefault_: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoReopen: ImGuiPopupFlags_ = 32;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoOpenOverExistingPopup: ImGuiPopupFlags_ = 128;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoOpenOverItems: ImGuiPopupFlags_ = 256;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopupId: ImGuiPopupFlags_ = 1024;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopupLevel: ImGuiPopupFlags_ = 2048;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopup: ImGuiPopupFlags_ = 3072;
pub type ImGuiPopupFlags_ = ::std::os::raw::c_int;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_None: ImGuiSelectableFlags_ = 0;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_NoAutoClosePopups: ImGuiSelectableFlags_ = 1;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_SpanAllColumns: ImGuiSelectableFlags_ = 2;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowDoubleClick: ImGuiSelectableFlags_ = 4;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_Disabled: ImGuiSelectableFlags_ = 8;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowOverlap: ImGuiSelectableFlags_ = 16;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_Highlight: ImGuiSelectableFlags_ = 32;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_DontClosePopups: ImGuiSelectableFlags_ = 1;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowItemOverlap: ImGuiSelectableFlags_ = 16;
pub type ImGuiSelectableFlags_ = ::std::os::raw::c_int;
pub const ImGuiComboFlags__ImGuiComboFlags_None: ImGuiComboFlags_ = 0;
pub const ImGuiComboFlags__ImGuiComboFlags_PopupAlignLeft: ImGuiComboFlags_ = 1;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightSmall: ImGuiComboFlags_ = 2;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightRegular: ImGuiComboFlags_ = 4;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightLarge: ImGuiComboFlags_ = 8;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightLargest: ImGuiComboFlags_ = 16;
pub const ImGuiComboFlags__ImGuiComboFlags_NoArrowButton: ImGuiComboFlags_ = 32;
pub const ImGuiComboFlags__ImGuiComboFlags_NoPreview: ImGuiComboFlags_ = 64;
pub const ImGuiComboFlags__ImGuiComboFlags_WidthFitPreview: ImGuiComboFlags_ = 128;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightMask_: ImGuiComboFlags_ = 30;
pub type ImGuiComboFlags_ = ::std::os::raw::c_int;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_None: ImGuiTabBarFlags_ = 0;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_Reorderable: ImGuiTabBarFlags_ = 1;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_AutoSelectNewTabs: ImGuiTabBarFlags_ = 2;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_TabListPopupButton: ImGuiTabBarFlags_ = 4;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoCloseWithMiddleMouseButton: ImGuiTabBarFlags_ = 8;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTabListScrollingButtons: ImGuiTabBarFlags_ = 16;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTooltip: ImGuiTabBarFlags_ = 32;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_DrawSelectedOverline: ImGuiTabBarFlags_ = 64;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyResizeDown: ImGuiTabBarFlags_ = 128;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyScroll: ImGuiTabBarFlags_ = 256;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyMask_: ImGuiTabBarFlags_ = 384;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyDefault_: ImGuiTabBarFlags_ = 128;
pub type ImGuiTabBarFlags_ = ::std::os::raw::c_int;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_None: ImGuiTabItemFlags_ = 0;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_UnsavedDocument: ImGuiTabItemFlags_ = 1;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_SetSelected: ImGuiTabItemFlags_ = 2;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoCloseWithMiddleMouseButton: ImGuiTabItemFlags_ = 4;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoPushId: ImGuiTabItemFlags_ = 8;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoTooltip: ImGuiTabItemFlags_ = 16;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoReorder: ImGuiTabItemFlags_ = 32;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_Leading: ImGuiTabItemFlags_ = 64;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_Trailing: ImGuiTabItemFlags_ = 128;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoAssumedClosure: ImGuiTabItemFlags_ = 256;
pub type ImGuiTabItemFlags_ = ::std::os::raw::c_int;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_None: ImGuiFocusedFlags_ = 0;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_ChildWindows: ImGuiFocusedFlags_ = 1;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootWindow: ImGuiFocusedFlags_ = 2;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_AnyWindow: ImGuiFocusedFlags_ = 4;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_NoPopupHierarchy: ImGuiFocusedFlags_ = 8;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_DockHierarchy: ImGuiFocusedFlags_ = 16;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootAndChildWindows: ImGuiFocusedFlags_ = 3;
pub type ImGuiFocusedFlags_ = ::std::os::raw::c_int;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_None: ImGuiHoveredFlags_ = 0;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_ChildWindows: ImGuiHoveredFlags_ = 1;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootWindow: ImGuiHoveredFlags_ = 2;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AnyWindow: ImGuiHoveredFlags_ = 4;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoPopupHierarchy: ImGuiHoveredFlags_ = 8;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DockHierarchy: ImGuiHoveredFlags_ = 16;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByPopup: ImGuiHoveredFlags_ = 32;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByActiveItem: ImGuiHoveredFlags_ =
    128;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlappedByItem: ImGuiHoveredFlags_ = 256;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlappedByWindow: ImGuiHoveredFlags_ =
    512;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenDisabled: ImGuiHoveredFlags_ = 1024;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoNavOverride: ImGuiHoveredFlags_ = 2048;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlapped: ImGuiHoveredFlags_ = 768;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RectOnly: ImGuiHoveredFlags_ = 928;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootAndChildWindows: ImGuiHoveredFlags_ = 3;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_ForTooltip: ImGuiHoveredFlags_ = 4096;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_Stationary: ImGuiHoveredFlags_ = 8192;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayNone: ImGuiHoveredFlags_ = 16384;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayShort: ImGuiHoveredFlags_ = 32768;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayNormal: ImGuiHoveredFlags_ = 65536;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoSharedDelay: ImGuiHoveredFlags_ = 131072;
pub type ImGuiHoveredFlags_ = ::std::os::raw::c_int;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_None: ImGuiDockNodeFlags_ = 0;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_KeepAliveOnly: ImGuiDockNodeFlags_ = 1;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoDockingOverCentralNode: ImGuiDockNodeFlags_ = 4;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_PassthruCentralNode: ImGuiDockNodeFlags_ = 8;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoDockingSplit: ImGuiDockNodeFlags_ = 16;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoResize: ImGuiDockNodeFlags_ = 32;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_AutoHideTabBar: ImGuiDockNodeFlags_ = 64;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoUndocking: ImGuiDockNodeFlags_ = 128;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoSplit: ImGuiDockNodeFlags_ = 16;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoDockingInCentralNode: ImGuiDockNodeFlags_ = 4;
pub type ImGuiDockNodeFlags_ = ::std::os::raw::c_int;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_None: ImGuiDragDropFlags_ = 0;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoPreviewTooltip: ImGuiDragDropFlags_ = 1;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoDisableHover: ImGuiDragDropFlags_ = 2;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoHoldToOpenOthers: ImGuiDragDropFlags_ = 4;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAllowNullID: ImGuiDragDropFlags_ = 8;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceExtern: ImGuiDragDropFlags_ = 16;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_PayloadAutoExpire: ImGuiDragDropFlags_ = 32;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_PayloadNoCrossContext: ImGuiDragDropFlags_ = 64;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_PayloadNoCrossProcess: ImGuiDragDropFlags_ = 128;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptBeforeDelivery: ImGuiDragDropFlags_ = 1024;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoDrawDefaultRect: ImGuiDragDropFlags_ =
    2048;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoPreviewTooltip: ImGuiDragDropFlags_ = 4096;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptPeekOnly: ImGuiDragDropFlags_ = 3072;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAutoExpirePayload: ImGuiDragDropFlags_ = 32;
pub type ImGuiDragDropFlags_ = ::std::os::raw::c_int;
pub const ImGuiDataType__ImGuiDataType_S8: ImGuiDataType_ = 0;
pub const ImGuiDataType__ImGuiDataType_U8: ImGuiDataType_ = 1;
pub const ImGuiDataType__ImGuiDataType_S16: ImGuiDataType_ = 2;
pub const ImGuiDataType__ImGuiDataType_U16: ImGuiDataType_ = 3;
pub const ImGuiDataType__ImGuiDataType_S32: ImGuiDataType_ = 4;
pub const ImGuiDataType__ImGuiDataType_U32: ImGuiDataType_ = 5;
pub const ImGuiDataType__ImGuiDataType_S64: ImGuiDataType_ = 6;
pub const ImGuiDataType__ImGuiDataType_U64: ImGuiDataType_ = 7;
pub const ImGuiDataType__ImGuiDataType_Float: ImGuiDataType_ = 8;
pub const ImGuiDataType__ImGuiDataType_Double: ImGuiDataType_ = 9;
pub const ImGuiDataType__ImGuiDataType_Bool: ImGuiDataType_ = 10;
pub const ImGuiDataType__ImGuiDataType_COUNT: ImGuiDataType_ = 11;
pub type ImGuiDataType_ = ::std::os::raw::c_int;
pub const ImGuiDir_ImGuiDir_None: ImGuiDir = -1;
pub const ImGuiDir_ImGuiDir_Left: ImGuiDir = 0;
pub const ImGuiDir_ImGuiDir_Right: ImGuiDir = 1;
pub const ImGuiDir_ImGuiDir_Up: ImGuiDir = 2;
pub const ImGuiDir_ImGuiDir_Down: ImGuiDir = 3;
pub const ImGuiDir_ImGuiDir_COUNT: ImGuiDir = 4;
pub type ImGuiDir = ::std::os::raw::c_int;
pub const ImGuiSortDirection_ImGuiSortDirection_None: ImGuiSortDirection = 0;
pub const ImGuiSortDirection_ImGuiSortDirection_Ascending: ImGuiSortDirection = 1;
pub const ImGuiSortDirection_ImGuiSortDirection_Descending: ImGuiSortDirection = 2;
pub type ImGuiSortDirection = ImU8;
pub const ImGuiKey_ImGuiKey_None: ImGuiKey = 0;
pub const ImGuiKey_ImGuiKey_Tab: ImGuiKey = 512;
pub const ImGuiKey_ImGuiKey_LeftArrow: ImGuiKey = 513;
pub const ImGuiKey_ImGuiKey_RightArrow: ImGuiKey = 514;
pub const ImGuiKey_ImGuiKey_UpArrow: ImGuiKey = 515;
pub const ImGuiKey_ImGuiKey_DownArrow: ImGuiKey = 516;
pub const ImGuiKey_ImGuiKey_PageUp: ImGuiKey = 517;
pub const ImGuiKey_ImGuiKey_PageDown: ImGuiKey = 518;
pub const ImGuiKey_ImGuiKey_Home: ImGuiKey = 519;
pub const ImGuiKey_ImGuiKey_End: ImGuiKey = 520;
pub const ImGuiKey_ImGuiKey_Insert: ImGuiKey = 521;
pub const ImGuiKey_ImGuiKey_Delete: ImGuiKey = 522;
pub const ImGuiKey_ImGuiKey_Backspace: ImGuiKey = 523;
pub const ImGuiKey_ImGuiKey_Space: ImGuiKey = 524;
pub const ImGuiKey_ImGuiKey_Enter: ImGuiKey = 525;
pub const ImGuiKey_ImGuiKey_Escape: ImGuiKey = 526;
pub const ImGuiKey_ImGuiKey_LeftCtrl: ImGuiKey = 527;
pub const ImGuiKey_ImGuiKey_LeftShift: ImGuiKey = 528;
pub const ImGuiKey_ImGuiKey_LeftAlt: ImGuiKey = 529;
pub const ImGuiKey_ImGuiKey_LeftSuper: ImGuiKey = 530;
pub const ImGuiKey_ImGuiKey_RightCtrl: ImGuiKey = 531;
pub const ImGuiKey_ImGuiKey_RightShift: ImGuiKey = 532;
pub const ImGuiKey_ImGuiKey_RightAlt: ImGuiKey = 533;
pub const ImGuiKey_ImGuiKey_RightSuper: ImGuiKey = 534;
pub const ImGuiKey_ImGuiKey_Menu: ImGuiKey = 535;
pub const ImGuiKey_ImGuiKey_0: ImGuiKey = 536;
pub const ImGuiKey_ImGuiKey_1: ImGuiKey = 537;
pub const ImGuiKey_ImGuiKey_2: ImGuiKey = 538;
pub const ImGuiKey_ImGuiKey_3: ImGuiKey = 539;
pub const ImGuiKey_ImGuiKey_4: ImGuiKey = 540;
pub const ImGuiKey_ImGuiKey_5: ImGuiKey = 541;
pub const ImGuiKey_ImGuiKey_6: ImGuiKey = 542;
pub const ImGuiKey_ImGuiKey_7: ImGuiKey = 543;
pub const ImGuiKey_ImGuiKey_8: ImGuiKey = 544;
pub const ImGuiKey_ImGuiKey_9: ImGuiKey = 545;
pub const ImGuiKey_ImGuiKey_A: ImGuiKey = 546;
pub const ImGuiKey_ImGuiKey_B: ImGuiKey = 547;
pub const ImGuiKey_ImGuiKey_C: ImGuiKey = 548;
pub const ImGuiKey_ImGuiKey_D: ImGuiKey = 549;
pub const ImGuiKey_ImGuiKey_E: ImGuiKey = 550;
pub const ImGuiKey_ImGuiKey_F: ImGuiKey = 551;
pub const ImGuiKey_ImGuiKey_G: ImGuiKey = 552;
pub const ImGuiKey_ImGuiKey_H: ImGuiKey = 553;
pub const ImGuiKey_ImGuiKey_I: ImGuiKey = 554;
pub const ImGuiKey_ImGuiKey_J: ImGuiKey = 555;
pub const ImGuiKey_ImGuiKey_K: ImGuiKey = 556;
pub const ImGuiKey_ImGuiKey_L: ImGuiKey = 557;
pub const ImGuiKey_ImGuiKey_M: ImGuiKey = 558;
pub const ImGuiKey_ImGuiKey_N: ImGuiKey = 559;
pub const ImGuiKey_ImGuiKey_O: ImGuiKey = 560;
pub const ImGuiKey_ImGuiKey_P: ImGuiKey = 561;
pub const ImGuiKey_ImGuiKey_Q: ImGuiKey = 562;
pub const ImGuiKey_ImGuiKey_R: ImGuiKey = 563;
pub const ImGuiKey_ImGuiKey_S: ImGuiKey = 564;
pub const ImGuiKey_ImGuiKey_T: ImGuiKey = 565;
pub const ImGuiKey_ImGuiKey_U: ImGuiKey = 566;
pub const ImGuiKey_ImGuiKey_V: ImGuiKey = 567;
pub const ImGuiKey_ImGuiKey_W: ImGuiKey = 568;
pub const ImGuiKey_ImGuiKey_X: ImGuiKey = 569;
pub const ImGuiKey_ImGuiKey_Y: ImGuiKey = 570;
pub const ImGuiKey_ImGuiKey_Z: ImGuiKey = 571;
pub const ImGuiKey_ImGuiKey_F1: ImGuiKey = 572;
pub const ImGuiKey_ImGuiKey_F2: ImGuiKey = 573;
pub const ImGuiKey_ImGuiKey_F3: ImGuiKey = 574;
pub const ImGuiKey_ImGuiKey_F4: ImGuiKey = 575;
pub const ImGuiKey_ImGuiKey_F5: ImGuiKey = 576;
pub const ImGuiKey_ImGuiKey_F6: ImGuiKey = 577;
pub const ImGuiKey_ImGuiKey_F7: ImGuiKey = 578;
pub const ImGuiKey_ImGuiKey_F8: ImGuiKey = 579;
pub const ImGuiKey_ImGuiKey_F9: ImGuiKey = 580;
pub const ImGuiKey_ImGuiKey_F10: ImGuiKey = 581;
pub const ImGuiKey_ImGuiKey_F11: ImGuiKey = 582;
pub const ImGuiKey_ImGuiKey_F12: ImGuiKey = 583;
pub const ImGuiKey_ImGuiKey_F13: ImGuiKey = 584;
pub const ImGuiKey_ImGuiKey_F14: ImGuiKey = 585;
pub const ImGuiKey_ImGuiKey_F15: ImGuiKey = 586;
pub const ImGuiKey_ImGuiKey_F16: ImGuiKey = 587;
pub const ImGuiKey_ImGuiKey_F17: ImGuiKey = 588;
pub const ImGuiKey_ImGuiKey_F18: ImGuiKey = 589;
pub const ImGuiKey_ImGuiKey_F19: ImGuiKey = 590;
pub const ImGuiKey_ImGuiKey_F20: ImGuiKey = 591;
pub const ImGuiKey_ImGuiKey_F21: ImGuiKey = 592;
pub const ImGuiKey_ImGuiKey_F22: ImGuiKey = 593;
pub const ImGuiKey_ImGuiKey_F23: ImGuiKey = 594;
pub const ImGuiKey_ImGuiKey_F24: ImGuiKey = 595;
pub const ImGuiKey_ImGuiKey_Apostrophe: ImGuiKey = 596;
pub const ImGuiKey_ImGuiKey_Comma: ImGuiKey = 597;
pub const ImGuiKey_ImGuiKey_Minus: ImGuiKey = 598;
pub const ImGuiKey_ImGuiKey_Period: ImGuiKey = 599;
pub const ImGuiKey_ImGuiKey_Slash: ImGuiKey = 600;
pub const ImGuiKey_ImGuiKey_Semicolon: ImGuiKey = 601;
pub const ImGuiKey_ImGuiKey_Equal: ImGuiKey = 602;
pub const ImGuiKey_ImGuiKey_LeftBracket: ImGuiKey = 603;
pub const ImGuiKey_ImGuiKey_Backslash: ImGuiKey = 604;
pub const ImGuiKey_ImGuiKey_RightBracket: ImGuiKey = 605;
pub const ImGuiKey_ImGuiKey_GraveAccent: ImGuiKey = 606;
pub const ImGuiKey_ImGuiKey_CapsLock: ImGuiKey = 607;
pub const ImGuiKey_ImGuiKey_ScrollLock: ImGuiKey = 608;
pub const ImGuiKey_ImGuiKey_NumLock: ImGuiKey = 609;
pub const ImGuiKey_ImGuiKey_PrintScreen: ImGuiKey = 610;
pub const ImGuiKey_ImGuiKey_Pause: ImGuiKey = 611;
pub const ImGuiKey_ImGuiKey_Keypad0: ImGuiKey = 612;
pub const ImGuiKey_ImGuiKey_Keypad1: ImGuiKey = 613;
pub const ImGuiKey_ImGuiKey_Keypad2: ImGuiKey = 614;
pub const ImGuiKey_ImGuiKey_Keypad3: ImGuiKey = 615;
pub const ImGuiKey_ImGuiKey_Keypad4: ImGuiKey = 616;
pub const ImGuiKey_ImGuiKey_Keypad5: ImGuiKey = 617;
pub const ImGuiKey_ImGuiKey_Keypad6: ImGuiKey = 618;
pub const ImGuiKey_ImGuiKey_Keypad7: ImGuiKey = 619;
pub const ImGuiKey_ImGuiKey_Keypad8: ImGuiKey = 620;
pub const ImGuiKey_ImGuiKey_Keypad9: ImGuiKey = 621;
pub const ImGuiKey_ImGuiKey_KeypadDecimal: ImGuiKey = 622;
pub const ImGuiKey_ImGuiKey_KeypadDivide: ImGuiKey = 623;
pub const ImGuiKey_ImGuiKey_KeypadMultiply: ImGuiKey = 624;
pub const ImGuiKey_ImGuiKey_KeypadSubtract: ImGuiKey = 625;
pub const ImGuiKey_ImGuiKey_KeypadAdd: ImGuiKey = 626;
pub const ImGuiKey_ImGuiKey_KeypadEnter: ImGuiKey = 627;
pub const ImGuiKey_ImGuiKey_KeypadEqual: ImGuiKey = 628;
pub const ImGuiKey_ImGuiKey_AppBack: ImGuiKey = 629;
pub const ImGuiKey_ImGuiKey_AppForward: ImGuiKey = 630;
pub const ImGuiKey_ImGuiKey_GamepadStart: ImGuiKey = 631;
pub const ImGuiKey_ImGuiKey_GamepadBack: ImGuiKey = 632;
pub const ImGuiKey_ImGuiKey_GamepadFaceLeft: ImGuiKey = 633;
pub const ImGuiKey_ImGuiKey_GamepadFaceRight: ImGuiKey = 634;
pub const ImGuiKey_ImGuiKey_GamepadFaceUp: ImGuiKey = 635;
pub const ImGuiKey_ImGuiKey_GamepadFaceDown: ImGuiKey = 636;
pub const ImGuiKey_ImGuiKey_GamepadDpadLeft: ImGuiKey = 637;
pub const ImGuiKey_ImGuiKey_GamepadDpadRight: ImGuiKey = 638;
pub const ImGuiKey_ImGuiKey_GamepadDpadUp: ImGuiKey = 639;
pub const ImGuiKey_ImGuiKey_GamepadDpadDown: ImGuiKey = 640;
pub const ImGuiKey_ImGuiKey_GamepadL1: ImGuiKey = 641;
pub const ImGuiKey_ImGuiKey_GamepadR1: ImGuiKey = 642;
pub const ImGuiKey_ImGuiKey_GamepadL2: ImGuiKey = 643;
pub const ImGuiKey_ImGuiKey_GamepadR2: ImGuiKey = 644;
pub const ImGuiKey_ImGuiKey_GamepadL3: ImGuiKey = 645;
pub const ImGuiKey_ImGuiKey_GamepadR3: ImGuiKey = 646;
pub const ImGuiKey_ImGuiKey_GamepadLStickLeft: ImGuiKey = 647;
pub const ImGuiKey_ImGuiKey_GamepadLStickRight: ImGuiKey = 648;
pub const ImGuiKey_ImGuiKey_GamepadLStickUp: ImGuiKey = 649;
pub const ImGuiKey_ImGuiKey_GamepadLStickDown: ImGuiKey = 650;
pub const ImGuiKey_ImGuiKey_GamepadRStickLeft: ImGuiKey = 651;
pub const ImGuiKey_ImGuiKey_GamepadRStickRight: ImGuiKey = 652;
pub const ImGuiKey_ImGuiKey_GamepadRStickUp: ImGuiKey = 653;
pub const ImGuiKey_ImGuiKey_GamepadRStickDown: ImGuiKey = 654;
pub const ImGuiKey_ImGuiKey_MouseLeft: ImGuiKey = 655;
pub const ImGuiKey_ImGuiKey_MouseRight: ImGuiKey = 656;
pub const ImGuiKey_ImGuiKey_MouseMiddle: ImGuiKey = 657;
pub const ImGuiKey_ImGuiKey_MouseX1: ImGuiKey = 658;
pub const ImGuiKey_ImGuiKey_MouseX2: ImGuiKey = 659;
pub const ImGuiKey_ImGuiKey_MouseWheelX: ImGuiKey = 660;
pub const ImGuiKey_ImGuiKey_MouseWheelY: ImGuiKey = 661;
pub const ImGuiKey_ImGuiKey_ReservedForModCtrl: ImGuiKey = 662;
pub const ImGuiKey_ImGuiKey_ReservedForModShift: ImGuiKey = 663;
pub const ImGuiKey_ImGuiKey_ReservedForModAlt: ImGuiKey = 664;
pub const ImGuiKey_ImGuiKey_ReservedForModSuper: ImGuiKey = 665;
pub const ImGuiKey_ImGuiKey_COUNT: ImGuiKey = 666;
pub const ImGuiKey_ImGuiMod_None: ImGuiKey = 0;
pub const ImGuiKey_ImGuiMod_Ctrl: ImGuiKey = 4096;
pub const ImGuiKey_ImGuiMod_Shift: ImGuiKey = 8192;
pub const ImGuiKey_ImGuiMod_Alt: ImGuiKey = 16384;
pub const ImGuiKey_ImGuiMod_Super: ImGuiKey = 32768;
pub const ImGuiKey_ImGuiMod_Mask_: ImGuiKey = 61440;
pub const ImGuiKey_ImGuiKey_NamedKey_BEGIN: ImGuiKey = 512;
pub const ImGuiKey_ImGuiKey_NamedKey_END: ImGuiKey = 666;
pub const ImGuiKey_ImGuiKey_NamedKey_COUNT: ImGuiKey = 154;
pub const ImGuiKey_ImGuiKey_KeysData_SIZE: ImGuiKey = 666;
pub const ImGuiKey_ImGuiKey_KeysData_OFFSET: ImGuiKey = 0;
pub const ImGuiKey_ImGuiMod_Shortcut: ImGuiKey = 4096;
pub const ImGuiKey_ImGuiKey_ModCtrl: ImGuiKey = 4096;
pub const ImGuiKey_ImGuiKey_ModShift: ImGuiKey = 8192;
pub const ImGuiKey_ImGuiKey_ModAlt: ImGuiKey = 16384;
pub const ImGuiKey_ImGuiKey_ModSuper: ImGuiKey = 32768;
pub type ImGuiKey = ::std::os::raw::c_int;
pub const ImGuiInputFlags__ImGuiInputFlags_None: ImGuiInputFlags_ = 0;
pub const ImGuiInputFlags__ImGuiInputFlags_Repeat: ImGuiInputFlags_ = 1;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteActive: ImGuiInputFlags_ = 1024;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteFocused: ImGuiInputFlags_ = 2048;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteGlobal: ImGuiInputFlags_ = 4096;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteAlways: ImGuiInputFlags_ = 8192;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteOverFocused: ImGuiInputFlags_ = 16384;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteOverActive: ImGuiInputFlags_ = 32768;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteUnlessBgFocused: ImGuiInputFlags_ = 65536;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteFromRootWindow: ImGuiInputFlags_ = 131072;
pub const ImGuiInputFlags__ImGuiInputFlags_Tooltip: ImGuiInputFlags_ = 262144;
pub type ImGuiInputFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavInput_ImGuiNavInput_Activate: ImGuiNavInput = 0;
pub const ImGuiNavInput_ImGuiNavInput_Cancel: ImGuiNavInput = 1;
pub const ImGuiNavInput_ImGuiNavInput_Input: ImGuiNavInput = 2;
pub const ImGuiNavInput_ImGuiNavInput_Menu: ImGuiNavInput = 3;
pub const ImGuiNavInput_ImGuiNavInput_DpadLeft: ImGuiNavInput = 4;
pub const ImGuiNavInput_ImGuiNavInput_DpadRight: ImGuiNavInput = 5;
pub const ImGuiNavInput_ImGuiNavInput_DpadUp: ImGuiNavInput = 6;
pub const ImGuiNavInput_ImGuiNavInput_DpadDown: ImGuiNavInput = 7;
pub const ImGuiNavInput_ImGuiNavInput_LStickLeft: ImGuiNavInput = 8;
pub const ImGuiNavInput_ImGuiNavInput_LStickRight: ImGuiNavInput = 9;
pub const ImGuiNavInput_ImGuiNavInput_LStickUp: ImGuiNavInput = 10;
pub const ImGuiNavInput_ImGuiNavInput_LStickDown: ImGuiNavInput = 11;
pub const ImGuiNavInput_ImGuiNavInput_FocusPrev: ImGuiNavInput = 12;
pub const ImGuiNavInput_ImGuiNavInput_FocusNext: ImGuiNavInput = 13;
pub const ImGuiNavInput_ImGuiNavInput_TweakSlow: ImGuiNavInput = 14;
pub const ImGuiNavInput_ImGuiNavInput_TweakFast: ImGuiNavInput = 15;
pub const ImGuiNavInput_ImGuiNavInput_COUNT: ImGuiNavInput = 16;
pub type ImGuiNavInput = ::std::os::raw::c_int;
pub const ImGuiConfigFlags__ImGuiConfigFlags_None: ImGuiConfigFlags_ = 0;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableKeyboard: ImGuiConfigFlags_ = 1;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableGamepad: ImGuiConfigFlags_ = 2;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableSetMousePos: ImGuiConfigFlags_ = 4;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavNoCaptureKeyboard: ImGuiConfigFlags_ = 8;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouse: ImGuiConfigFlags_ = 16;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouseCursorChange: ImGuiConfigFlags_ = 32;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoKeyboard: ImGuiConfigFlags_ = 64;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DockingEnable: ImGuiConfigFlags_ = 128;
pub const ImGuiConfigFlags__ImGuiConfigFlags_ViewportsEnable: ImGuiConfigFlags_ = 1024;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DpiEnableScaleViewports: ImGuiConfigFlags_ = 16384;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DpiEnableScaleFonts: ImGuiConfigFlags_ = 32768;
pub const ImGuiConfigFlags__ImGuiConfigFlags_IsSRGB: ImGuiConfigFlags_ = 1048576;
pub const ImGuiConfigFlags__ImGuiConfigFlags_IsTouchScreen: ImGuiConfigFlags_ = 2097152;
pub type ImGuiConfigFlags_ = ::std::os::raw::c_int;
pub const ImGuiBackendFlags__ImGuiBackendFlags_None: ImGuiBackendFlags_ = 0;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasGamepad: ImGuiBackendFlags_ = 1;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseCursors: ImGuiBackendFlags_ = 2;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasSetMousePos: ImGuiBackendFlags_ = 4;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasVtxOffset: ImGuiBackendFlags_ = 8;
pub const ImGuiBackendFlags__ImGuiBackendFlags_PlatformHasViewports: ImGuiBackendFlags_ = 1024;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseHoveredViewport: ImGuiBackendFlags_ = 2048;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasViewports: ImGuiBackendFlags_ = 4096;
pub type ImGuiBackendFlags_ = ::std::os::raw::c_int;
pub const ImGuiCol__ImGuiCol_Text: ImGuiCol_ = 0;
pub const ImGuiCol__ImGuiCol_TextDisabled: ImGuiCol_ = 1;
pub const ImGuiCol__ImGuiCol_WindowBg: ImGuiCol_ = 2;
pub const ImGuiCol__ImGuiCol_ChildBg: ImGuiCol_ = 3;
pub const ImGuiCol__ImGuiCol_PopupBg: ImGuiCol_ = 4;
pub const ImGuiCol__ImGuiCol_Border: ImGuiCol_ = 5;
pub const ImGuiCol__ImGuiCol_BorderShadow: ImGuiCol_ = 6;
pub const ImGuiCol__ImGuiCol_FrameBg: ImGuiCol_ = 7;
pub const ImGuiCol__ImGuiCol_FrameBgHovered: ImGuiCol_ = 8;
pub const ImGuiCol__ImGuiCol_FrameBgActive: ImGuiCol_ = 9;
pub const ImGuiCol__ImGuiCol_TitleBg: ImGuiCol_ = 10;
pub const ImGuiCol__ImGuiCol_TitleBgActive: ImGuiCol_ = 11;
pub const ImGuiCol__ImGuiCol_TitleBgCollapsed: ImGuiCol_ = 12;
pub const ImGuiCol__ImGuiCol_MenuBarBg: ImGuiCol_ = 13;
pub const ImGuiCol__ImGuiCol_ScrollbarBg: ImGuiCol_ = 14;
pub const ImGuiCol__ImGuiCol_ScrollbarGrab: ImGuiCol_ = 15;
pub const ImGuiCol__ImGuiCol_ScrollbarGrabHovered: ImGuiCol_ = 16;
pub const ImGuiCol__ImGuiCol_ScrollbarGrabActive: ImGuiCol_ = 17;
pub const ImGuiCol__ImGuiCol_CheckMark: ImGuiCol_ = 18;
pub const ImGuiCol__ImGuiCol_SliderGrab: ImGuiCol_ = 19;
pub const ImGuiCol__ImGuiCol_SliderGrabActive: ImGuiCol_ = 20;
pub const ImGuiCol__ImGuiCol_Button: ImGuiCol_ = 21;
pub const ImGuiCol__ImGuiCol_ButtonHovered: ImGuiCol_ = 22;
pub const ImGuiCol__ImGuiCol_ButtonActive: ImGuiCol_ = 23;
pub const ImGuiCol__ImGuiCol_Header: ImGuiCol_ = 24;
pub const ImGuiCol__ImGuiCol_HeaderHovered: ImGuiCol_ = 25;
pub const ImGuiCol__ImGuiCol_HeaderActive: ImGuiCol_ = 26;
pub const ImGuiCol__ImGuiCol_Separator: ImGuiCol_ = 27;
pub const ImGuiCol__ImGuiCol_SeparatorHovered: ImGuiCol_ = 28;
pub const ImGuiCol__ImGuiCol_SeparatorActive: ImGuiCol_ = 29;
pub const ImGuiCol__ImGuiCol_ResizeGrip: ImGuiCol_ = 30;
pub const ImGuiCol__ImGuiCol_ResizeGripHovered: ImGuiCol_ = 31;
pub const ImGuiCol__ImGuiCol_ResizeGripActive: ImGuiCol_ = 32;
pub const ImGuiCol__ImGuiCol_TabHovered: ImGuiCol_ = 33;
pub const ImGuiCol__ImGuiCol_Tab: ImGuiCol_ = 34;
pub const ImGuiCol__ImGuiCol_TabSelected: ImGuiCol_ = 35;
pub const ImGuiCol__ImGuiCol_TabSelectedOverline: ImGuiCol_ = 36;
pub const ImGuiCol__ImGuiCol_TabDimmed: ImGuiCol_ = 37;
pub const ImGuiCol__ImGuiCol_TabDimmedSelected: ImGuiCol_ = 38;
pub const ImGuiCol__ImGuiCol_TabDimmedSelectedOverline: ImGuiCol_ = 39;
pub const ImGuiCol__ImGuiCol_DockingPreview: ImGuiCol_ = 40;
pub const ImGuiCol__ImGuiCol_DockingEmptyBg: ImGuiCol_ = 41;
pub const ImGuiCol__ImGuiCol_PlotLines: ImGuiCol_ = 42;
pub const ImGuiCol__ImGuiCol_PlotLinesHovered: ImGuiCol_ = 43;
pub const ImGuiCol__ImGuiCol_PlotHistogram: ImGuiCol_ = 44;
pub const ImGuiCol__ImGuiCol_PlotHistogramHovered: ImGuiCol_ = 45;
pub const ImGuiCol__ImGuiCol_TableHeaderBg: ImGuiCol_ = 46;
pub const ImGuiCol__ImGuiCol_TableBorderStrong: ImGuiCol_ = 47;
pub const ImGuiCol__ImGuiCol_TableBorderLight: ImGuiCol_ = 48;
pub const ImGuiCol__ImGuiCol_TableRowBg: ImGuiCol_ = 49;
pub const ImGuiCol__ImGuiCol_TableRowBgAlt: ImGuiCol_ = 50;
pub const ImGuiCol__ImGuiCol_TextLink: ImGuiCol_ = 51;
pub const ImGuiCol__ImGuiCol_TextSelectedBg: ImGuiCol_ = 52;
pub const ImGuiCol__ImGuiCol_DragDropTarget: ImGuiCol_ = 53;
pub const ImGuiCol__ImGuiCol_NavHighlight: ImGuiCol_ = 54;
pub const ImGuiCol__ImGuiCol_NavWindowingHighlight: ImGuiCol_ = 55;
pub const ImGuiCol__ImGuiCol_NavWindowingDimBg: ImGuiCol_ = 56;
pub const ImGuiCol__ImGuiCol_ModalWindowDimBg: ImGuiCol_ = 57;
pub const ImGuiCol__ImGuiCol_COUNT: ImGuiCol_ = 58;
pub const ImGuiCol__ImGuiCol_TabActive: ImGuiCol_ = 35;
pub const ImGuiCol__ImGuiCol_TabUnfocused: ImGuiCol_ = 37;
pub const ImGuiCol__ImGuiCol_TabUnfocusedActive: ImGuiCol_ = 38;
pub type ImGuiCol_ = ::std::os::raw::c_int;
pub const ImGuiStyleVar__ImGuiStyleVar_Alpha: ImGuiStyleVar_ = 0;
pub const ImGuiStyleVar__ImGuiStyleVar_DisabledAlpha: ImGuiStyleVar_ = 1;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowPadding: ImGuiStyleVar_ = 2;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowRounding: ImGuiStyleVar_ = 3;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowBorderSize: ImGuiStyleVar_ = 4;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowMinSize: ImGuiStyleVar_ = 5;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowTitleAlign: ImGuiStyleVar_ = 6;
pub const ImGuiStyleVar__ImGuiStyleVar_ChildRounding: ImGuiStyleVar_ = 7;
pub const ImGuiStyleVar__ImGuiStyleVar_ChildBorderSize: ImGuiStyleVar_ = 8;
pub const ImGuiStyleVar__ImGuiStyleVar_PopupRounding: ImGuiStyleVar_ = 9;
pub const ImGuiStyleVar__ImGuiStyleVar_PopupBorderSize: ImGuiStyleVar_ = 10;
pub const ImGuiStyleVar__ImGuiStyleVar_FramePadding: ImGuiStyleVar_ = 11;
pub const ImGuiStyleVar__ImGuiStyleVar_FrameRounding: ImGuiStyleVar_ = 12;
pub const ImGuiStyleVar__ImGuiStyleVar_FrameBorderSize: ImGuiStyleVar_ = 13;
pub const ImGuiStyleVar__ImGuiStyleVar_ItemSpacing: ImGuiStyleVar_ = 14;
pub const ImGuiStyleVar__ImGuiStyleVar_ItemInnerSpacing: ImGuiStyleVar_ = 15;
pub const ImGuiStyleVar__ImGuiStyleVar_IndentSpacing: ImGuiStyleVar_ = 16;
pub const ImGuiStyleVar__ImGuiStyleVar_CellPadding: ImGuiStyleVar_ = 17;
pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarSize: ImGuiStyleVar_ = 18;
pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarRounding: ImGuiStyleVar_ = 19;
pub const ImGuiStyleVar__ImGuiStyleVar_GrabMinSize: ImGuiStyleVar_ = 20;
pub const ImGuiStyleVar__ImGuiStyleVar_GrabRounding: ImGuiStyleVar_ = 21;
pub const ImGuiStyleVar__ImGuiStyleVar_TabRounding: ImGuiStyleVar_ = 22;
pub const ImGuiStyleVar__ImGuiStyleVar_TabBorderSize: ImGuiStyleVar_ = 23;
pub const ImGuiStyleVar__ImGuiStyleVar_TabBarBorderSize: ImGuiStyleVar_ = 24;
pub const ImGuiStyleVar__ImGuiStyleVar_TabBarOverlineSize: ImGuiStyleVar_ = 25;
pub const ImGuiStyleVar__ImGuiStyleVar_TableAngledHeadersAngle: ImGuiStyleVar_ = 26;
pub const ImGuiStyleVar__ImGuiStyleVar_TableAngledHeadersTextAlign: ImGuiStyleVar_ = 27;
pub const ImGuiStyleVar__ImGuiStyleVar_ButtonTextAlign: ImGuiStyleVar_ = 28;
pub const ImGuiStyleVar__ImGuiStyleVar_SelectableTextAlign: ImGuiStyleVar_ = 29;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextBorderSize: ImGuiStyleVar_ = 30;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextAlign: ImGuiStyleVar_ = 31;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextPadding: ImGuiStyleVar_ = 32;
pub const ImGuiStyleVar__ImGuiStyleVar_DockingSeparatorSize: ImGuiStyleVar_ = 33;
pub const ImGuiStyleVar__ImGuiStyleVar_COUNT: ImGuiStyleVar_ = 34;
pub type ImGuiStyleVar_ = ::std::os::raw::c_int;
pub const ImGuiButtonFlags__ImGuiButtonFlags_None: ImGuiButtonFlags_ = 0;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonLeft: ImGuiButtonFlags_ = 1;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonRight: ImGuiButtonFlags_ = 2;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonMiddle: ImGuiButtonFlags_ = 4;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonMask_: ImGuiButtonFlags_ = 7;
pub type ImGuiButtonFlags_ = ::std::os::raw::c_int;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_None: ImGuiColorEditFlags_ = 0;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoAlpha: ImGuiColorEditFlags_ = 2;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoPicker: ImGuiColorEditFlags_ = 4;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoOptions: ImGuiColorEditFlags_ = 8;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSmallPreview: ImGuiColorEditFlags_ = 16;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoInputs: ImGuiColorEditFlags_ = 32;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoTooltip: ImGuiColorEditFlags_ = 64;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoLabel: ImGuiColorEditFlags_ = 128;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSidePreview: ImGuiColorEditFlags_ = 256;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoDragDrop: ImGuiColorEditFlags_ = 512;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoBorder: ImGuiColorEditFlags_ = 1024;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaBar: ImGuiColorEditFlags_ = 65536;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreview: ImGuiColorEditFlags_ = 131072;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreviewHalf: ImGuiColorEditFlags_ = 262144;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_HDR: ImGuiColorEditFlags_ = 524288;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayRGB: ImGuiColorEditFlags_ = 1048576;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHSV: ImGuiColorEditFlags_ = 2097152;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHex: ImGuiColorEditFlags_ = 4194304;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Uint8: ImGuiColorEditFlags_ = 8388608;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Float: ImGuiColorEditFlags_ = 16777216;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueBar: ImGuiColorEditFlags_ = 33554432;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueWheel: ImGuiColorEditFlags_ = 67108864;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputRGB: ImGuiColorEditFlags_ = 134217728;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputHSV: ImGuiColorEditFlags_ = 268435456;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DefaultOptions_: ImGuiColorEditFlags_ =
    177209344;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayMask_: ImGuiColorEditFlags_ = 7340032;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DataTypeMask_: ImGuiColorEditFlags_ = 25165824;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerMask_: ImGuiColorEditFlags_ = 100663296;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputMask_: ImGuiColorEditFlags_ = 402653184;
pub type ImGuiColorEditFlags_ = ::std::os::raw::c_int;
pub const ImGuiSliderFlags__ImGuiSliderFlags_None: ImGuiSliderFlags_ = 0;
pub const ImGuiSliderFlags__ImGuiSliderFlags_Logarithmic: ImGuiSliderFlags_ = 32;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoRoundToFormat: ImGuiSliderFlags_ = 64;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoInput: ImGuiSliderFlags_ = 128;
pub const ImGuiSliderFlags__ImGuiSliderFlags_WrapAround: ImGuiSliderFlags_ = 256;
pub const ImGuiSliderFlags__ImGuiSliderFlags_ClampOnInput: ImGuiSliderFlags_ = 512;
pub const ImGuiSliderFlags__ImGuiSliderFlags_ClampZeroRange: ImGuiSliderFlags_ = 1024;
pub const ImGuiSliderFlags__ImGuiSliderFlags_AlwaysClamp: ImGuiSliderFlags_ = 1536;
pub const ImGuiSliderFlags__ImGuiSliderFlags_InvalidMask_: ImGuiSliderFlags_ = 1879048207;
pub type ImGuiSliderFlags_ = ::std::os::raw::c_int;
pub const ImGuiMouseButton__ImGuiMouseButton_Left: ImGuiMouseButton_ = 0;
pub const ImGuiMouseButton__ImGuiMouseButton_Right: ImGuiMouseButton_ = 1;
pub const ImGuiMouseButton__ImGuiMouseButton_Middle: ImGuiMouseButton_ = 2;
pub const ImGuiMouseButton__ImGuiMouseButton_COUNT: ImGuiMouseButton_ = 5;
pub type ImGuiMouseButton_ = ::std::os::raw::c_int;
pub const ImGuiMouseCursor__ImGuiMouseCursor_None: ImGuiMouseCursor_ = -1;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Arrow: ImGuiMouseCursor_ = 0;
pub const ImGuiMouseCursor__ImGuiMouseCursor_TextInput: ImGuiMouseCursor_ = 1;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeAll: ImGuiMouseCursor_ = 2;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNS: ImGuiMouseCursor_ = 3;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeEW: ImGuiMouseCursor_ = 4;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNESW: ImGuiMouseCursor_ = 5;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNWSE: ImGuiMouseCursor_ = 6;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Hand: ImGuiMouseCursor_ = 7;
pub const ImGuiMouseCursor__ImGuiMouseCursor_NotAllowed: ImGuiMouseCursor_ = 8;
pub const ImGuiMouseCursor__ImGuiMouseCursor_COUNT: ImGuiMouseCursor_ = 9;
pub type ImGuiMouseCursor_ = ::std::os::raw::c_int;
pub const ImGuiMouseSource_ImGuiMouseSource_Mouse: ImGuiMouseSource = 0;
pub const ImGuiMouseSource_ImGuiMouseSource_TouchScreen: ImGuiMouseSource = 1;
pub const ImGuiMouseSource_ImGuiMouseSource_Pen: ImGuiMouseSource = 2;
pub const ImGuiMouseSource_ImGuiMouseSource_COUNT: ImGuiMouseSource = 3;
pub type ImGuiMouseSource = ::std::os::raw::c_int;
pub const ImGuiCond__ImGuiCond_None: ImGuiCond_ = 0;
pub const ImGuiCond__ImGuiCond_Always: ImGuiCond_ = 1;
pub const ImGuiCond__ImGuiCond_Once: ImGuiCond_ = 2;
pub const ImGuiCond__ImGuiCond_FirstUseEver: ImGuiCond_ = 4;
pub const ImGuiCond__ImGuiCond_Appearing: ImGuiCond_ = 8;
pub type ImGuiCond_ = ::std::os::raw::c_int;
pub const ImGuiTableFlags__ImGuiTableFlags_None: ImGuiTableFlags_ = 0;
pub const ImGuiTableFlags__ImGuiTableFlags_Resizable: ImGuiTableFlags_ = 1;
pub const ImGuiTableFlags__ImGuiTableFlags_Reorderable: ImGuiTableFlags_ = 2;
pub const ImGuiTableFlags__ImGuiTableFlags_Hideable: ImGuiTableFlags_ = 4;
pub const ImGuiTableFlags__ImGuiTableFlags_Sortable: ImGuiTableFlags_ = 8;
pub const ImGuiTableFlags__ImGuiTableFlags_NoSavedSettings: ImGuiTableFlags_ = 16;
pub const ImGuiTableFlags__ImGuiTableFlags_ContextMenuInBody: ImGuiTableFlags_ = 32;
pub const ImGuiTableFlags__ImGuiTableFlags_RowBg: ImGuiTableFlags_ = 64;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInnerH: ImGuiTableFlags_ = 128;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuterH: ImGuiTableFlags_ = 256;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInnerV: ImGuiTableFlags_ = 512;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuterV: ImGuiTableFlags_ = 1024;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersH: ImGuiTableFlags_ = 384;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersV: ImGuiTableFlags_ = 1536;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInner: ImGuiTableFlags_ = 640;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuter: ImGuiTableFlags_ = 1280;
pub const ImGuiTableFlags__ImGuiTableFlags_Borders: ImGuiTableFlags_ = 1920;
pub const ImGuiTableFlags__ImGuiTableFlags_NoBordersInBody: ImGuiTableFlags_ = 2048;
pub const ImGuiTableFlags__ImGuiTableFlags_NoBordersInBodyUntilResize: ImGuiTableFlags_ = 4096;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingFixedFit: ImGuiTableFlags_ = 8192;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingFixedSame: ImGuiTableFlags_ = 16384;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingStretchProp: ImGuiTableFlags_ = 24576;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingStretchSame: ImGuiTableFlags_ = 32768;
pub const ImGuiTableFlags__ImGuiTableFlags_NoHostExtendX: ImGuiTableFlags_ = 65536;
pub const ImGuiTableFlags__ImGuiTableFlags_NoHostExtendY: ImGuiTableFlags_ = 131072;
pub const ImGuiTableFlags__ImGuiTableFlags_NoKeepColumnsVisible: ImGuiTableFlags_ = 262144;
pub const ImGuiTableFlags__ImGuiTableFlags_PreciseWidths: ImGuiTableFlags_ = 524288;
pub const ImGuiTableFlags__ImGuiTableFlags_NoClip: ImGuiTableFlags_ = 1048576;
pub const ImGuiTableFlags__ImGuiTableFlags_PadOuterX: ImGuiTableFlags_ = 2097152;
pub const ImGuiTableFlags__ImGuiTableFlags_NoPadOuterX: ImGuiTableFlags_ = 4194304;
pub const ImGuiTableFlags__ImGuiTableFlags_NoPadInnerX: ImGuiTableFlags_ = 8388608;
pub const ImGuiTableFlags__ImGuiTableFlags_ScrollX: ImGuiTableFlags_ = 16777216;
pub const ImGuiTableFlags__ImGuiTableFlags_ScrollY: ImGuiTableFlags_ = 33554432;
pub const ImGuiTableFlags__ImGuiTableFlags_SortMulti: ImGuiTableFlags_ = 67108864;
pub const ImGuiTableFlags__ImGuiTableFlags_SortTristate: ImGuiTableFlags_ = 134217728;
pub const ImGuiTableFlags__ImGuiTableFlags_HighlightHoveredColumn: ImGuiTableFlags_ = 268435456;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingMask_: ImGuiTableFlags_ = 57344;
pub type ImGuiTableFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_None: ImGuiTableColumnFlags_ = 0;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_Disabled: ImGuiTableColumnFlags_ = 1;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_DefaultHide: ImGuiTableColumnFlags_ = 2;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_DefaultSort: ImGuiTableColumnFlags_ = 4;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthStretch: ImGuiTableColumnFlags_ = 8;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthFixed: ImGuiTableColumnFlags_ = 16;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoResize: ImGuiTableColumnFlags_ = 32;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoReorder: ImGuiTableColumnFlags_ = 64;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHide: ImGuiTableColumnFlags_ = 128;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoClip: ImGuiTableColumnFlags_ = 256;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSort: ImGuiTableColumnFlags_ = 512;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSortAscending: ImGuiTableColumnFlags_ =
    1024;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSortDescending: ImGuiTableColumnFlags_ =
    2048;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHeaderLabel: ImGuiTableColumnFlags_ = 4096;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHeaderWidth: ImGuiTableColumnFlags_ = 8192;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_PreferSortAscending: ImGuiTableColumnFlags_ =
    16384;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_PreferSortDescending:
    ImGuiTableColumnFlags_ = 32768;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentEnable: ImGuiTableColumnFlags_ = 65536;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentDisable: ImGuiTableColumnFlags_ =
    131072;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_AngledHeader: ImGuiTableColumnFlags_ =
    262144;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsEnabled: ImGuiTableColumnFlags_ = 16777216;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsVisible: ImGuiTableColumnFlags_ = 33554432;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsSorted: ImGuiTableColumnFlags_ = 67108864;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsHovered: ImGuiTableColumnFlags_ =
    134217728;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthMask_: ImGuiTableColumnFlags_ = 24;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentMask_: ImGuiTableColumnFlags_ = 196608;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_StatusMask_: ImGuiTableColumnFlags_ =
    251658240;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoDirectResize_: ImGuiTableColumnFlags_ =
    1073741824;
pub type ImGuiTableColumnFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableRowFlags__ImGuiTableRowFlags_None: ImGuiTableRowFlags_ = 0;
pub const ImGuiTableRowFlags__ImGuiTableRowFlags_Headers: ImGuiTableRowFlags_ = 1;
pub type ImGuiTableRowFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_None: ImGuiTableBgTarget_ = 0;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_RowBg0: ImGuiTableBgTarget_ = 1;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_RowBg1: ImGuiTableBgTarget_ = 2;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_CellBg: ImGuiTableBgTarget_ = 3;
pub type ImGuiTableBgTarget_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableSortSpecs {
    pub Specs: *const ImGuiTableColumnSortSpecs,
    pub SpecsCount: ::std::os::raw::c_int,
    pub SpecsDirty: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTableSortSpecs() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTableSortSpecs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableSortSpecs>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTableSortSpecs))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableSortSpecs>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTableSortSpecs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Specs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSortSpecs),
            "::",
            stringify!(Specs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SpecsCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSortSpecs),
            "::",
            stringify!(SpecsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SpecsDirty) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSortSpecs),
            "::",
            stringify!(SpecsDirty)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnSortSpecs {
    pub ColumnUserID: ImGuiID,
    pub ColumnIndex: ImS16,
    pub SortOrder: ImS16,
    pub SortDirection: ImGuiSortDirection,
}
#[test]
fn bindgen_test_layout_ImGuiTableColumnSortSpecs() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTableColumnSortSpecs> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableColumnSortSpecs>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiTableColumnSortSpecs))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableColumnSortSpecs>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableColumnSortSpecs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnUserID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSortSpecs),
            "::",
            stringify!(ColumnUserID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSortSpecs),
            "::",
            stringify!(ColumnIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SortOrder) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSortSpecs),
            "::",
            stringify!(SortOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SortDirection) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSortSpecs),
            "::",
            stringify!(SortDirection)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImNewWrapper {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_ImNewWrapper() {
    assert_eq!(
        ::std::mem::size_of::<ImNewWrapper>(),
        1usize,
        concat!("Size of: ", stringify!(ImNewWrapper))
    );
    assert_eq!(
        ::std::mem::align_of::<ImNewWrapper>(),
        1usize,
        concat!("Alignment of ", stringify!(ImNewWrapper))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ImVector<T> {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut T,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
pub type ImVector_value_type<T> = T;
pub type ImVector_iterator<T> = *mut ImVector_value_type<T>;
pub type ImVector_const_iterator<T> = *const ImVector_value_type<T>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStyle {
    pub Alpha: f32,
    pub DisabledAlpha: f32,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub WindowMinSize: ImVec2,
    pub WindowTitleAlign: ImVec2,
    pub WindowMenuButtonPosition: ImGuiDir,
    pub ChildRounding: f32,
    pub ChildBorderSize: f32,
    pub PopupRounding: f32,
    pub PopupBorderSize: f32,
    pub FramePadding: ImVec2,
    pub FrameRounding: f32,
    pub FrameBorderSize: f32,
    pub ItemSpacing: ImVec2,
    pub ItemInnerSpacing: ImVec2,
    pub CellPadding: ImVec2,
    pub TouchExtraPadding: ImVec2,
    pub IndentSpacing: f32,
    pub ColumnsMinSpacing: f32,
    pub ScrollbarSize: f32,
    pub ScrollbarRounding: f32,
    pub GrabMinSize: f32,
    pub GrabRounding: f32,
    pub LogSliderDeadzone: f32,
    pub TabRounding: f32,
    pub TabBorderSize: f32,
    pub TabMinWidthForCloseButton: f32,
    pub TabBarBorderSize: f32,
    pub TabBarOverlineSize: f32,
    pub TableAngledHeadersAngle: f32,
    pub TableAngledHeadersTextAlign: ImVec2,
    pub ColorButtonPosition: ImGuiDir,
    pub ButtonTextAlign: ImVec2,
    pub SelectableTextAlign: ImVec2,
    pub SeparatorTextBorderSize: f32,
    pub SeparatorTextAlign: ImVec2,
    pub SeparatorTextPadding: ImVec2,
    pub DisplayWindowPadding: ImVec2,
    pub DisplaySafeAreaPadding: ImVec2,
    pub DockingSeparatorSize: f32,
    pub MouseCursorScale: f32,
    pub AntiAliasedLines: bool,
    pub AntiAliasedLinesUseTex: bool,
    pub AntiAliasedFill: bool,
    pub CurveTessellationTol: f32,
    pub CircleTessellationMaxError: f32,
    pub Colors: [ImVec4; 58usize],
    pub HoverStationaryDelay: f32,
    pub HoverDelayShort: f32,
    pub HoverDelayNormal: f32,
    pub HoverFlagsForTooltipMouse: ImGuiHoveredFlags,
    pub HoverFlagsForTooltipNav: ImGuiHoveredFlags,
}
#[test]
fn bindgen_test_layout_ImGuiStyle() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStyle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyle>(),
        1192usize,
        concat!("Size of: ", stringify!(ImGuiStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyle>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Alpha) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(Alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisabledAlpha) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(DisabledAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowPadding) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowRounding) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowBorderSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowMinSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowMinSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowTitleAlign) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowTitleAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WindowMenuButtonPosition) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowMenuButtonPosition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChildRounding) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ChildRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChildBorderSize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ChildBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PopupRounding) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(PopupRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PopupBorderSize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(PopupBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FramePadding) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FramePadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameRounding) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FrameRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameBorderSize) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FrameBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemSpacing) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ItemSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemInnerSpacing) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ItemInnerSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CellPadding) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(CellPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TouchExtraPadding) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TouchExtraPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IndentSpacing) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(IndentSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColumnsMinSpacing) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ColumnsMinSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollbarSize) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ScrollbarSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScrollbarRounding) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ScrollbarRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GrabMinSize) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(GrabMinSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GrabRounding) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(GrabRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogSliderDeadzone) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(LogSliderDeadzone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabRounding) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabRounding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabBorderSize) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabMinWidthForCloseButton) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabMinWidthForCloseButton)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabBarBorderSize) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabBarBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabBarOverlineSize) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabBarOverlineSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TableAngledHeadersAngle) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TableAngledHeadersAngle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TableAngledHeadersTextAlign) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TableAngledHeadersTextAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorButtonPosition) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ColorButtonPosition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ButtonTextAlign) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ButtonTextAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectableTextAlign) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(SelectableTextAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SeparatorTextBorderSize) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(SeparatorTextBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SeparatorTextAlign) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(SeparatorTextAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SeparatorTextPadding) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(SeparatorTextPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayWindowPadding) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(DisplayWindowPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplaySafeAreaPadding) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(DisplaySafeAreaPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockingSeparatorSize) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(DockingSeparatorSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseCursorScale) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(MouseCursorScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AntiAliasedLines) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AntiAliasedLinesUseTex) as usize - ptr as usize },
        233usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedLinesUseTex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AntiAliasedFill) as usize - ptr as usize },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedFill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurveTessellationTol) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(CurveTessellationTol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CircleTessellationMaxError) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(CircleTessellationMaxError)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Colors) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(Colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverStationaryDelay) as usize - ptr as usize },
        1172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(HoverStationaryDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverDelayShort) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(HoverDelayShort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverDelayNormal) as usize - ptr as usize },
        1180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(HoverDelayNormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverFlagsForTooltipMouse) as usize - ptr as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(HoverFlagsForTooltipMouse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverFlagsForTooltipNav) as usize - ptr as usize },
        1188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(HoverFlagsForTooltipNav)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?ScaleAllSizes@ImGuiStyle@@QEAAXM@Z"]
    pub fn ImGuiStyle_ScaleAllSizes(this: *mut ImGuiStyle, scale_factor: f32);
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiStyle@@QEAA@XZ"]
    pub fn ImGuiStyle_ImGuiStyle(this: *mut ImGuiStyle);
}
impl ImGuiStyle {
    #[inline]
    pub unsafe fn ScaleAllSizes(&mut self, scale_factor: f32) {
        ImGuiStyle_ScaleAllSizes(self, scale_factor)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiStyle_ImGuiStyle(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyData {
    pub Down: bool,
    pub DownDuration: f32,
    pub DownDurationPrev: f32,
    pub AnalogValue: f32,
}
#[test]
fn bindgen_test_layout_ImGuiKeyData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiKeyData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiKeyData>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiKeyData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiKeyData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiKeyData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Down) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyData),
            "::",
            stringify!(Down)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DownDuration) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyData),
            "::",
            stringify!(DownDuration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DownDurationPrev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyData),
            "::",
            stringify!(DownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AnalogValue) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiKeyData),
            "::",
            stringify!(AnalogValue)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiIO {
    pub ConfigFlags: ImGuiConfigFlags,
    pub BackendFlags: ImGuiBackendFlags,
    pub DisplaySize: ImVec2,
    pub DeltaTime: f32,
    pub IniSavingRate: f32,
    pub IniFilename: *const ::std::os::raw::c_char,
    pub LogFilename: *const ::std::os::raw::c_char,
    pub UserData: *mut ::std::os::raw::c_void,
    pub Fonts: *mut ImFontAtlas,
    pub FontGlobalScale: f32,
    pub FontAllowUserScaling: bool,
    pub FontDefault: *mut ImFont,
    pub DisplayFramebufferScale: ImVec2,
    pub ConfigDockingNoSplit: bool,
    pub ConfigDockingWithShift: bool,
    pub ConfigDockingAlwaysTabBar: bool,
    pub ConfigDockingTransparentPayload: bool,
    pub ConfigViewportsNoAutoMerge: bool,
    pub ConfigViewportsNoTaskBarIcon: bool,
    pub ConfigViewportsNoDecoration: bool,
    pub ConfigViewportsNoDefaultParent: bool,
    pub MouseDrawCursor: bool,
    pub ConfigMacOSXBehaviors: bool,
    pub ConfigNavSwapGamepadButtons: bool,
    pub ConfigInputTrickleEventQueue: bool,
    pub ConfigInputTextCursorBlink: bool,
    pub ConfigInputTextEnterKeepActive: bool,
    pub ConfigDragClickToInputText: bool,
    pub ConfigWindowsResizeFromEdges: bool,
    pub ConfigWindowsMoveFromTitleBarOnly: bool,
    pub ConfigScrollbarScrollByPage: bool,
    pub ConfigMemoryCompactTimer: f32,
    pub MouseDoubleClickTime: f32,
    pub MouseDoubleClickMaxDist: f32,
    pub MouseDragThreshold: f32,
    pub KeyRepeatDelay: f32,
    pub KeyRepeatRate: f32,
    pub ConfigErrorRecovery: bool,
    pub ConfigErrorRecoveryEnableAssert: bool,
    pub ConfigErrorRecoveryEnableDebugLog: bool,
    pub ConfigErrorRecoveryEnableTooltip: bool,
    pub ConfigDebugIsDebuggerPresent: bool,
    pub ConfigDebugHighlightIdConflicts: bool,
    pub ConfigDebugBeginReturnValueOnce: bool,
    pub ConfigDebugBeginReturnValueLoop: bool,
    pub ConfigDebugIgnoreFocusLoss: bool,
    pub ConfigDebugIniSettings: bool,
    pub BackendPlatformName: *const ::std::os::raw::c_char,
    pub BackendRendererName: *const ::std::os::raw::c_char,
    pub BackendPlatformUserData: *mut ::std::os::raw::c_void,
    pub BackendRendererUserData: *mut ::std::os::raw::c_void,
    pub BackendLanguageUserData: *mut ::std::os::raw::c_void,
    pub WantCaptureMouse: bool,
    pub WantCaptureKeyboard: bool,
    pub WantTextInput: bool,
    pub WantSetMousePos: bool,
    pub WantSaveIniSettings: bool,
    pub NavActive: bool,
    pub NavVisible: bool,
    pub Framerate: f32,
    pub MetricsRenderVertices: ::std::os::raw::c_int,
    pub MetricsRenderIndices: ::std::os::raw::c_int,
    pub MetricsRenderWindows: ::std::os::raw::c_int,
    pub MetricsActiveWindows: ::std::os::raw::c_int,
    pub MouseDelta: ImVec2,
    pub Ctx: *mut ImGuiContext,
    pub MousePos: ImVec2,
    pub MouseDown: [bool; 5usize],
    pub MouseWheel: f32,
    pub MouseWheelH: f32,
    pub MouseSource: ImGuiMouseSource,
    pub MouseHoveredViewport: ImGuiID,
    pub KeyCtrl: bool,
    pub KeyShift: bool,
    pub KeyAlt: bool,
    pub KeySuper: bool,
    pub KeyMods: ImGuiKeyChord,
    pub KeysData: [ImGuiKeyData; 666usize],
    pub WantCaptureMouseUnlessPopupClose: bool,
    pub MousePosPrev: ImVec2,
    pub MouseClickedPos: [ImVec2; 5usize],
    pub MouseClickedTime: [f64; 5usize],
    pub MouseClicked: [bool; 5usize],
    pub MouseDoubleClicked: [bool; 5usize],
    pub MouseClickedCount: [ImU16; 5usize],
    pub MouseClickedLastCount: [ImU16; 5usize],
    pub MouseReleased: [bool; 5usize],
    pub MouseDownOwned: [bool; 5usize],
    pub MouseDownOwnedUnlessPopupClose: [bool; 5usize],
    pub MouseWheelRequestAxisSwap: bool,
    pub MouseCtrlLeftAsRightClick: bool,
    pub MouseDownDuration: [f32; 5usize],
    pub MouseDownDurationPrev: [f32; 5usize],
    pub MouseDragMaxDistanceAbs: [ImVec2; 5usize],
    pub MouseDragMaxDistanceSqr: [f32; 5usize],
    pub PenPressure: f32,
    pub AppFocusLost: bool,
    pub AppAcceptingEvents: bool,
    pub BackendUsingLegacyKeyArrays: ImS8,
    pub BackendUsingLegacyNavInputArray: bool,
    pub InputQueueSurrogate: ImWchar16,
    pub InputQueueCharacters: ImVector<ImWchar>,
    pub KeyMap: [::std::os::raw::c_int; 666usize],
    pub KeysDown: [bool; 666usize],
    pub NavInputs: [f32; 16usize],
    pub GetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub SetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub ClipboardUserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiIO() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiIO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiIO>(),
        14616usize,
        concat!("Size of: ", stringify!(ImGuiIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiIO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendFlags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplaySize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(DisplaySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeltaTime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(DeltaTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IniSavingRate) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(IniSavingRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IniFilename) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(IniFilename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogFilename) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(LogFilename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Fonts) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(Fonts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontGlobalScale) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(FontGlobalScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontAllowUserScaling) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(FontAllowUserScaling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontDefault) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(FontDefault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayFramebufferScale) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(DisplayFramebufferScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDockingNoSplit) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingNoSplit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDockingWithShift) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingWithShift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDockingAlwaysTabBar) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingAlwaysTabBar)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigDockingTransparentPayload) as usize - ptr as usize
        },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingTransparentPayload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigViewportsNoAutoMerge) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoAutoMerge)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigViewportsNoTaskBarIcon) as usize - ptr as usize
        },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoTaskBarIcon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigViewportsNoDecoration) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoDecoration)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigViewportsNoDefaultParent) as usize - ptr as usize
        },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoDefaultParent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDrawCursor) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDrawCursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigMacOSXBehaviors) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigMacOSXBehaviors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigNavSwapGamepadButtons) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigNavSwapGamepadButtons)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigInputTrickleEventQueue) as usize - ptr as usize
        },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigInputTrickleEventQueue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigInputTextCursorBlink) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigInputTextCursorBlink)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigInputTextEnterKeepActive) as usize - ptr as usize
        },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigInputTextEnterKeepActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDragClickToInputText) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDragClickToInputText)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigWindowsResizeFromEdges) as usize - ptr as usize
        },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigWindowsResizeFromEdges)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigWindowsMoveFromTitleBarOnly) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigWindowsMoveFromTitleBarOnly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigScrollbarScrollByPage) as usize - ptr as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigScrollbarScrollByPage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigMemoryCompactTimer) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigMemoryCompactTimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDoubleClickTime) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClickTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDoubleClickMaxDist) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClickMaxDist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDragThreshold) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragThreshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyRepeatDelay) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyRepeatDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyRepeatRate) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyRepeatRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigErrorRecovery) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigErrorRecovery)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigErrorRecoveryEnableAssert) as usize - ptr as usize
        },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigErrorRecoveryEnableAssert)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigErrorRecoveryEnableDebugLog) as usize - ptr as usize
        },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigErrorRecoveryEnableDebugLog)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigErrorRecoveryEnableTooltip) as usize - ptr as usize
        },
        127usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigErrorRecoveryEnableTooltip)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigDebugIsDebuggerPresent) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDebugIsDebuggerPresent)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigDebugHighlightIdConflicts) as usize - ptr as usize
        },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDebugHighlightIdConflicts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigDebugBeginReturnValueOnce) as usize - ptr as usize
        },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDebugBeginReturnValueOnce)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ConfigDebugBeginReturnValueLoop) as usize - ptr as usize
        },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDebugBeginReturnValueLoop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDebugIgnoreFocusLoss) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDebugIgnoreFocusLoss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDebugIniSettings) as usize - ptr as usize },
        133usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDebugIniSettings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendPlatformName) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendPlatformName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendRendererName) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendRendererName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendPlatformUserData) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendPlatformUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendRendererUserData) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendRendererUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendLanguageUserData) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendLanguageUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantCaptureMouse) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantCaptureMouse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantCaptureKeyboard) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantCaptureKeyboard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantTextInput) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantTextInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantSetMousePos) as usize - ptr as usize },
        179usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantSetMousePos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantSaveIniSettings) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantSaveIniSettings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavActive) as usize - ptr as usize },
        181usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavActive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavVisible) as usize - ptr as usize },
        182usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavVisible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Framerate) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(Framerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsRenderVertices) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderVertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsRenderIndices) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderIndices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsRenderWindows) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderWindows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsActiveWindows) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsActiveWindows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDelta) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDelta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ctx) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(Ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MousePos) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MousePos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDown) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseWheel) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseWheel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseWheelH) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseWheelH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseSource) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseHoveredViewport) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseHoveredViewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyCtrl) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyCtrl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyShift) as usize - ptr as usize },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyShift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyAlt) as usize - ptr as usize },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyAlt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeySuper) as usize - ptr as usize },
        259usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeySuper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyMods) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyMods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeysData) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeysData)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).WantCaptureMouseUnlessPopupClose) as usize - ptr as usize
        },
        10920usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantCaptureMouseUnlessPopupClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MousePosPrev) as usize - ptr as usize },
        10924usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MousePosPrev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClickedPos) as usize - ptr as usize },
        10932usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClickedPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClickedTime) as usize - ptr as usize },
        10976usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClickedTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClicked) as usize - ptr as usize },
        11016usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClicked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDoubleClicked) as usize - ptr as usize },
        11021usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClicked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClickedCount) as usize - ptr as usize },
        11026usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClickedCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseClickedLastCount) as usize - ptr as usize },
        11036usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClickedLastCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseReleased) as usize - ptr as usize },
        11046usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseReleased)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDownOwned) as usize - ptr as usize },
        11051usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownOwned)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).MouseDownOwnedUnlessPopupClose) as usize - ptr as usize
        },
        11056usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownOwnedUnlessPopupClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseWheelRequestAxisSwap) as usize - ptr as usize },
        11061usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseWheelRequestAxisSwap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseCtrlLeftAsRightClick) as usize - ptr as usize },
        11062usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseCtrlLeftAsRightClick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDownDuration) as usize - ptr as usize },
        11064usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownDuration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDownDurationPrev) as usize - ptr as usize },
        11084usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDragMaxDistanceAbs) as usize - ptr as usize },
        11104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragMaxDistanceAbs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseDragMaxDistanceSqr) as usize - ptr as usize },
        11144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragMaxDistanceSqr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PenPressure) as usize - ptr as usize },
        11164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(PenPressure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AppFocusLost) as usize - ptr as usize },
        11168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(AppFocusLost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AppAcceptingEvents) as usize - ptr as usize },
        11169usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(AppAcceptingEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackendUsingLegacyKeyArrays) as usize - ptr as usize },
        11170usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendUsingLegacyKeyArrays)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BackendUsingLegacyNavInputArray) as usize - ptr as usize
        },
        11171usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendUsingLegacyNavInputArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputQueueSurrogate) as usize - ptr as usize },
        11172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(InputQueueSurrogate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputQueueCharacters) as usize - ptr as usize },
        11176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(InputQueueCharacters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyMap) as usize - ptr as usize },
        11192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeysDown) as usize - ptr as usize },
        13856usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeysDown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavInputs) as usize - ptr as usize },
        14524usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavInputs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetClipboardTextFn) as usize - ptr as usize },
        14592usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(GetClipboardTextFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetClipboardTextFn) as usize - ptr as usize },
        14600usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(SetClipboardTextFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipboardUserData) as usize - ptr as usize },
        14608usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ClipboardUserData)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z"]
    pub fn ImGuiIO_AddKeyEvent(this: *mut ImGuiIO, key: ImGuiKey, down: bool);
}
extern "C" {
    #[link_name = "\u{1}?AddKeyAnalogEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_NM@Z"]
    pub fn ImGuiIO_AddKeyAnalogEvent(this: *mut ImGuiIO, key: ImGuiKey, down: bool, v: f32);
}
extern "C" {
    #[link_name = "\u{1}?AddMousePosEvent@ImGuiIO@@QEAAXMM@Z"]
    pub fn ImGuiIO_AddMousePosEvent(this: *mut ImGuiIO, x: f32, y: f32);
}
extern "C" {
    #[link_name = "\u{1}?AddMouseButtonEvent@ImGuiIO@@QEAAXH_N@Z"]
    pub fn ImGuiIO_AddMouseButtonEvent(
        this: *mut ImGuiIO,
        button: ::std::os::raw::c_int,
        down: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddMouseWheelEvent@ImGuiIO@@QEAAXMM@Z"]
    pub fn ImGuiIO_AddMouseWheelEvent(this: *mut ImGuiIO, wheel_x: f32, wheel_y: f32);
}
extern "C" {
    #[link_name = "\u{1}?AddMouseSourceEvent@ImGuiIO@@QEAAXW4ImGuiMouseSource@@@Z"]
    pub fn ImGuiIO_AddMouseSourceEvent(this: *mut ImGuiIO, source: ImGuiMouseSource);
}
extern "C" {
    #[link_name = "\u{1}?AddMouseViewportEvent@ImGuiIO@@QEAAXI@Z"]
    pub fn ImGuiIO_AddMouseViewportEvent(this: *mut ImGuiIO, id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}?AddFocusEvent@ImGuiIO@@QEAAX_N@Z"]
    pub fn ImGuiIO_AddFocusEvent(this: *mut ImGuiIO, focused: bool);
}
extern "C" {
    #[link_name = "\u{1}?AddInputCharacter@ImGuiIO@@QEAAXI@Z"]
    pub fn ImGuiIO_AddInputCharacter(this: *mut ImGuiIO, c: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}?AddInputCharacterUTF16@ImGuiIO@@QEAAXG@Z"]
    pub fn ImGuiIO_AddInputCharacterUTF16(this: *mut ImGuiIO, c: ImWchar16);
}
extern "C" {
    #[link_name = "\u{1}?AddInputCharactersUTF8@ImGuiIO@@QEAAXPEBD@Z"]
    pub fn ImGuiIO_AddInputCharactersUTF8(this: *mut ImGuiIO, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}?SetKeyEventNativeData@ImGuiIO@@QEAAXW4ImGuiKey@@HHH@Z"]
    pub fn ImGuiIO_SetKeyEventNativeData(
        this: *mut ImGuiIO,
        key: ImGuiKey,
        native_keycode: ::std::os::raw::c_int,
        native_scancode: ::std::os::raw::c_int,
        native_legacy_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?SetAppAcceptingEvents@ImGuiIO@@QEAAX_N@Z"]
    pub fn ImGuiIO_SetAppAcceptingEvents(this: *mut ImGuiIO, accepting_events: bool);
}
extern "C" {
    #[link_name = "\u{1}?ClearEventsQueue@ImGuiIO@@QEAAXXZ"]
    pub fn ImGuiIO_ClearEventsQueue(this: *mut ImGuiIO);
}
extern "C" {
    #[link_name = "\u{1}?ClearInputKeys@ImGuiIO@@QEAAXXZ"]
    pub fn ImGuiIO_ClearInputKeys(this: *mut ImGuiIO);
}
extern "C" {
    #[link_name = "\u{1}?ClearInputMouse@ImGuiIO@@QEAAXXZ"]
    pub fn ImGuiIO_ClearInputMouse(this: *mut ImGuiIO);
}
extern "C" {
    #[link_name = "\u{1}?ClearInputCharacters@ImGuiIO@@QEAAXXZ"]
    pub fn ImGuiIO_ClearInputCharacters(this: *mut ImGuiIO);
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiIO@@QEAA@XZ"]
    pub fn ImGuiIO_ImGuiIO(this: *mut ImGuiIO);
}
impl ImGuiIO {
    #[inline]
    pub unsafe fn AddKeyEvent(&mut self, key: ImGuiKey, down: bool) {
        ImGuiIO_AddKeyEvent(self, key, down)
    }
    #[inline]
    pub unsafe fn AddKeyAnalogEvent(&mut self, key: ImGuiKey, down: bool, v: f32) {
        ImGuiIO_AddKeyAnalogEvent(self, key, down, v)
    }
    #[inline]
    pub unsafe fn AddMousePosEvent(&mut self, x: f32, y: f32) {
        ImGuiIO_AddMousePosEvent(self, x, y)
    }
    #[inline]
    pub unsafe fn AddMouseButtonEvent(&mut self, button: ::std::os::raw::c_int, down: bool) {
        ImGuiIO_AddMouseButtonEvent(self, button, down)
    }
    #[inline]
    pub unsafe fn AddMouseWheelEvent(&mut self, wheel_x: f32, wheel_y: f32) {
        ImGuiIO_AddMouseWheelEvent(self, wheel_x, wheel_y)
    }
    #[inline]
    pub unsafe fn AddMouseSourceEvent(&mut self, source: ImGuiMouseSource) {
        ImGuiIO_AddMouseSourceEvent(self, source)
    }
    #[inline]
    pub unsafe fn AddMouseViewportEvent(&mut self, id: ImGuiID) {
        ImGuiIO_AddMouseViewportEvent(self, id)
    }
    #[inline]
    pub unsafe fn AddFocusEvent(&mut self, focused: bool) {
        ImGuiIO_AddFocusEvent(self, focused)
    }
    #[inline]
    pub unsafe fn AddInputCharacter(&mut self, c: ::std::os::raw::c_uint) {
        ImGuiIO_AddInputCharacter(self, c)
    }
    #[inline]
    pub unsafe fn AddInputCharacterUTF16(&mut self, c: ImWchar16) {
        ImGuiIO_AddInputCharacterUTF16(self, c)
    }
    #[inline]
    pub unsafe fn AddInputCharactersUTF8(&mut self, str_: *const ::std::os::raw::c_char) {
        ImGuiIO_AddInputCharactersUTF8(self, str_)
    }
    #[inline]
    pub unsafe fn SetKeyEventNativeData(
        &mut self,
        key: ImGuiKey,
        native_keycode: ::std::os::raw::c_int,
        native_scancode: ::std::os::raw::c_int,
        native_legacy_index: ::std::os::raw::c_int,
    ) {
        ImGuiIO_SetKeyEventNativeData(
            self,
            key,
            native_keycode,
            native_scancode,
            native_legacy_index,
        )
    }
    #[inline]
    pub unsafe fn SetAppAcceptingEvents(&mut self, accepting_events: bool) {
        ImGuiIO_SetAppAcceptingEvents(self, accepting_events)
    }
    #[inline]
    pub unsafe fn ClearEventsQueue(&mut self) {
        ImGuiIO_ClearEventsQueue(self)
    }
    #[inline]
    pub unsafe fn ClearInputKeys(&mut self) {
        ImGuiIO_ClearInputKeys(self)
    }
    #[inline]
    pub unsafe fn ClearInputMouse(&mut self) {
        ImGuiIO_ClearInputMouse(self)
    }
    #[inline]
    pub unsafe fn ClearInputCharacters(&mut self) {
        ImGuiIO_ClearInputCharacters(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiIO_ImGuiIO(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextCallbackData {
    pub Ctx: *mut ImGuiContext,
    pub EventFlag: ImGuiInputTextFlags,
    pub Flags: ImGuiInputTextFlags,
    pub UserData: *mut ::std::os::raw::c_void,
    pub EventChar: ImWchar,
    pub EventKey: ImGuiKey,
    pub Buf: *mut ::std::os::raw::c_char,
    pub BufTextLen: ::std::os::raw::c_int,
    pub BufSize: ::std::os::raw::c_int,
    pub BufDirty: bool,
    pub CursorPos: ::std::os::raw::c_int,
    pub SelectionStart: ::std::os::raw::c_int,
    pub SelectionEnd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiInputTextCallbackData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiInputTextCallbackData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputTextCallbackData>(),
        64usize,
        concat!("Size of: ", stringify!(ImGuiInputTextCallbackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputTextCallbackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiInputTextCallbackData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(Ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EventFlag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventFlag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EventChar) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventChar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EventKey) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufTextLen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufTextLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufSize) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufDirty) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufDirty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CursorPos) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(CursorPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectionStart) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(SelectionStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectionEnd) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(SelectionEnd)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z"]
    pub fn ImGuiInputTextCallbackData_DeleteChars(
        this: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z"]
    pub fn ImGuiInputTextCallbackData_InsertChars(
        this: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiInputTextCallbackData@@QEAA@XZ"]
    pub fn ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(
        this: *mut ImGuiInputTextCallbackData,
    );
}
impl ImGuiInputTextCallbackData {
    #[inline]
    pub unsafe fn DeleteChars(
        &mut self,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    ) {
        ImGuiInputTextCallbackData_DeleteChars(self, pos, bytes_count)
    }
    #[inline]
    pub unsafe fn InsertChars(
        &mut self,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImGuiInputTextCallbackData_InsertChars(self, pos, text, text_end)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSizeCallbackData {
    pub UserData: *mut ::std::os::raw::c_void,
    pub Pos: ImVec2,
    pub CurrentSize: ImVec2,
    pub DesiredSize: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiSizeCallbackData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiSizeCallbackData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiSizeCallbackData>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiSizeCallbackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSizeCallbackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSizeCallbackData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(CurrentSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DesiredSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(DesiredSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowClass {
    pub ClassId: ImGuiID,
    pub ParentViewportId: ImGuiID,
    pub FocusRouteParentWindowId: ImGuiID,
    pub ViewportFlagsOverrideSet: ImGuiViewportFlags,
    pub ViewportFlagsOverrideClear: ImGuiViewportFlags,
    pub TabItemFlagsOverrideSet: ImGuiTabItemFlags,
    pub DockNodeFlagsOverrideSet: ImGuiDockNodeFlags,
    pub DockingAlwaysTabBar: bool,
    pub DockingAllowUnclassed: bool,
}
#[test]
fn bindgen_test_layout_ImGuiWindowClass() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiWindowClass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowClass>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiWindowClass))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowClass>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiWindowClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClassId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ClassId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParentViewportId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ParentViewportId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FocusRouteParentWindowId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(FocusRouteParentWindowId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ViewportFlagsOverrideSet) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ViewportFlagsOverrideSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ViewportFlagsOverrideClear) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ViewportFlagsOverrideClear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TabItemFlagsOverrideSet) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(TabItemFlagsOverrideSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockNodeFlagsOverrideSet) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(DockNodeFlagsOverrideSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockingAlwaysTabBar) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(DockingAlwaysTabBar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DockingAllowUnclassed) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(DockingAllowUnclassed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPayload {
    pub Data: *mut ::std::os::raw::c_void,
    pub DataSize: ::std::os::raw::c_int,
    pub SourceId: ImGuiID,
    pub SourceParentId: ImGuiID,
    pub DataFrameCount: ::std::os::raw::c_int,
    pub DataType: [::std::os::raw::c_char; 33usize],
    pub Preview: bool,
    pub Delivery: bool,
}
#[test]
fn bindgen_test_layout_ImGuiPayload() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiPayload> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiPayload>(),
        64usize,
        concat!("Size of: ", stringify!(ImGuiPayload))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPayload>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPayload))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SourceId) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(SourceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SourceParentId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(SourceParentId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataFrameCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Preview) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(Preview)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Delivery) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(Delivery)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOnceUponAFrame {
    pub RefFrame: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiOnceUponAFrame() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiOnceUponAFrame> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiOnceUponAFrame>(),
        4usize,
        concat!("Size of: ", stringify!(ImGuiOnceUponAFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiOnceUponAFrame>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiOnceUponAFrame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RefFrame) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOnceUponAFrame),
            "::",
            stringify!(RefFrame)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiTextFilter {
    pub InputBuf: [::std::os::raw::c_char; 256usize],
    pub Filters: ImVector<ImGuiTextFilter_ImGuiTextRange>,
    pub CountGrep: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextFilter_ImGuiTextRange {
    pub b: *const ::std::os::raw::c_char,
    pub e: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImGuiTextFilter_ImGuiTextRange() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTextFilter_ImGuiTextRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextFilter_ImGuiTextRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTextFilter_ImGuiTextRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextFilter_ImGuiTextRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextFilter_ImGuiTextRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter_ImGuiTextRange),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter_ImGuiTextRange),
            "::",
            stringify!(e)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?split@ImGuiTextRange@ImGuiTextFilter@@QEBAXDPEAU?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@@Z"]
    pub fn ImGuiTextFilter_ImGuiTextRange_split(
        this: *const ImGuiTextFilter_ImGuiTextRange,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector<ImGuiTextFilter_ImGuiTextRange>,
    );
}
impl ImGuiTextFilter_ImGuiTextRange {
    #[inline]
    pub unsafe fn split(
        &self,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector<ImGuiTextFilter_ImGuiTextRange>,
    ) {
        ImGuiTextFilter_ImGuiTextRange_split(self, separator, out)
    }
}
#[test]
fn bindgen_test_layout_ImGuiTextFilter() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTextFilter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextFilter>(),
        280usize,
        concat!("Size of: ", stringify!(ImGuiTextFilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextFilter>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextFilter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputBuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(InputBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Filters) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(Filters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CountGrep) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(CountGrep)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?Draw@ImGuiTextFilter@@QEAA_NPEBDM@Z"]
    pub fn ImGuiTextFilter_Draw(
        this: *mut ImGuiTextFilter,
        label: *const ::std::os::raw::c_char,
        width: f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?PassFilter@ImGuiTextFilter@@QEBA_NPEBD0@Z"]
    pub fn ImGuiTextFilter_PassFilter(
        this: *const ImGuiTextFilter,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Build@ImGuiTextFilter@@QEAAXXZ"]
    pub fn ImGuiTextFilter_Build(this: *mut ImGuiTextFilter);
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiTextFilter@@QEAA@PEBD@Z"]
    pub fn ImGuiTextFilter_ImGuiTextFilter(
        this: *mut ImGuiTextFilter,
        default_filter: *const ::std::os::raw::c_char,
    );
}
impl ImGuiTextFilter {
    #[inline]
    pub unsafe fn Draw(&mut self, label: *const ::std::os::raw::c_char, width: f32) -> bool {
        ImGuiTextFilter_Draw(self, label, width)
    }
    #[inline]
    pub unsafe fn PassFilter(
        &self,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool {
        ImGuiTextFilter_PassFilter(self, text, text_end)
    }
    #[inline]
    pub unsafe fn Build(&mut self) {
        ImGuiTextFilter_Build(self)
    }
    #[inline]
    pub unsafe fn new(default_filter: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiTextFilter_ImGuiTextFilter(__bindgen_tmp.as_mut_ptr(), default_filter);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiTextBuffer {
    pub Buf: ImVector<::std::os::raw::c_char>,
}
extern "C" {
    #[link_name = "\u{1}?EmptyString@ImGuiTextBuffer@@2PADA"]
    pub static mut ImGuiTextBuffer_EmptyString: [::std::os::raw::c_char; 1usize];
}
#[test]
fn bindgen_test_layout_ImGuiTextBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiTextBuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextBuffer>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTextBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextBuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextBuffer),
            "::",
            stringify!(Buf)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?append@ImGuiTextBuffer@@QEAAXPEBD0@Z"]
    pub fn ImGuiTextBuffer_append(
        this: *mut ImGuiTextBuffer,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ"]
    pub fn ImGuiTextBuffer_appendf(
        this: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}?appendfv@ImGuiTextBuffer@@QEAAXPEBDPEAD@Z"]
    pub fn ImGuiTextBuffer_appendfv(
        this: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
impl ImGuiTextBuffer {
    #[inline]
    pub unsafe fn append(
        &mut self,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) {
        ImGuiTextBuffer_append(self, str_, str_end)
    }
    #[inline]
    pub unsafe fn appendfv(&mut self, fmt: *const ::std::os::raw::c_char, args: va_list) {
        ImGuiTextBuffer_appendfv(self, fmt, args)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStoragePair {
    pub key: ImGuiID,
    pub __bindgen_anon_1: ImGuiStoragePair__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStoragePair__bindgen_ty_1 {
    pub val_i: ::std::os::raw::c_int,
    pub val_f: f32,
    pub val_p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiStoragePair__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStoragePair__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStoragePair__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiStoragePair__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStoragePair__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStoragePair__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val_i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val_f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_p)
        )
    );
}
#[test]
fn bindgen_test_layout_ImGuiStoragePair() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStoragePair> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStoragePair>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiStoragePair))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStoragePair>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStoragePair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C)]
pub struct ImGuiStorage {
    pub Data: ImVector<ImGuiStoragePair>,
}
#[test]
fn bindgen_test_layout_ImGuiStorage() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiStorage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiStorage>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiStorage))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStorage>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStorage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStorage),
            "::",
            stringify!(Data)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?GetInt@ImGuiStorage@@QEBAHIH@Z"]
    pub fn ImGuiStorage_GetInt(
        this: *const ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?SetInt@ImGuiStorage@@QEAAXIH@Z"]
    pub fn ImGuiStorage_SetInt(this: *mut ImGuiStorage, key: ImGuiID, val: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?GetBool@ImGuiStorage@@QEBA_NI_N@Z"]
    pub fn ImGuiStorage_GetBool(this: *const ImGuiStorage, key: ImGuiID, default_val: bool)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}?SetBool@ImGuiStorage@@QEAAXI_N@Z"]
    pub fn ImGuiStorage_SetBool(this: *mut ImGuiStorage, key: ImGuiID, val: bool);
}
extern "C" {
    #[link_name = "\u{1}?GetFloat@ImGuiStorage@@QEBAMIM@Z"]
    pub fn ImGuiStorage_GetFloat(this: *const ImGuiStorage, key: ImGuiID, default_val: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}?SetFloat@ImGuiStorage@@QEAAXIM@Z"]
    pub fn ImGuiStorage_SetFloat(this: *mut ImGuiStorage, key: ImGuiID, val: f32);
}
extern "C" {
    #[link_name = "\u{1}?GetVoidPtr@ImGuiStorage@@QEBAPEAXI@Z"]
    pub fn ImGuiStorage_GetVoidPtr(
        this: *const ImGuiStorage,
        key: ImGuiID,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}?SetVoidPtr@ImGuiStorage@@QEAAXIPEAX@Z"]
    pub fn ImGuiStorage_SetVoidPtr(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        val: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?GetIntRef@ImGuiStorage@@QEAAPEAHIH@Z"]
    pub fn ImGuiStorage_GetIntRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?GetBoolRef@ImGuiStorage@@QEAAPEA_NI_N@Z"]
    pub fn ImGuiStorage_GetBoolRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: bool,
    ) -> *mut bool;
}
extern "C" {
    #[link_name = "\u{1}?GetFloatRef@ImGuiStorage@@QEAAPEAMIM@Z"]
    pub fn ImGuiStorage_GetFloatRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: f32,
    ) -> *mut f32;
}
extern "C" {
    #[link_name = "\u{1}?GetVoidPtrRef@ImGuiStorage@@QEAAPEAPEAXIPEAX@Z"]
    pub fn ImGuiStorage_GetVoidPtrRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}?BuildSortByKey@ImGuiStorage@@QEAAXXZ"]
    pub fn ImGuiStorage_BuildSortByKey(this: *mut ImGuiStorage);
}
extern "C" {
    #[link_name = "\u{1}?SetAllInt@ImGuiStorage@@QEAAXH@Z"]
    pub fn ImGuiStorage_SetAllInt(this: *mut ImGuiStorage, val: ::std::os::raw::c_int);
}
impl ImGuiStorage {
    #[inline]
    pub unsafe fn GetInt(
        &self,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        ImGuiStorage_GetInt(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetInt(&mut self, key: ImGuiID, val: ::std::os::raw::c_int) {
        ImGuiStorage_SetInt(self, key, val)
    }
    #[inline]
    pub unsafe fn GetBool(&self, key: ImGuiID, default_val: bool) -> bool {
        ImGuiStorage_GetBool(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetBool(&mut self, key: ImGuiID, val: bool) {
        ImGuiStorage_SetBool(self, key, val)
    }
    #[inline]
    pub unsafe fn GetFloat(&self, key: ImGuiID, default_val: f32) -> f32 {
        ImGuiStorage_GetFloat(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetFloat(&mut self, key: ImGuiID, val: f32) {
        ImGuiStorage_SetFloat(self, key, val)
    }
    #[inline]
    pub unsafe fn GetVoidPtr(&self, key: ImGuiID) -> *mut ::std::os::raw::c_void {
        ImGuiStorage_GetVoidPtr(self, key)
    }
    #[inline]
    pub unsafe fn SetVoidPtr(&mut self, key: ImGuiID, val: *mut ::std::os::raw::c_void) {
        ImGuiStorage_SetVoidPtr(self, key, val)
    }
    #[inline]
    pub unsafe fn GetIntRef(
        &mut self,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int {
        ImGuiStorage_GetIntRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetBoolRef(&mut self, key: ImGuiID, default_val: bool) -> *mut bool {
        ImGuiStorage_GetBoolRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetFloatRef(&mut self, key: ImGuiID, default_val: f32) -> *mut f32 {
        ImGuiStorage_GetFloatRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetVoidPtrRef(
        &mut self,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void {
        ImGuiStorage_GetVoidPtrRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn BuildSortByKey(&mut self) {
        ImGuiStorage_BuildSortByKey(self)
    }
    #[inline]
    pub unsafe fn SetAllInt(&mut self, val: ::std::os::raw::c_int) {
        ImGuiStorage_SetAllInt(self, val)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiListClipper {
    pub Ctx: *mut ImGuiContext,
    pub DisplayStart: ::std::os::raw::c_int,
    pub DisplayEnd: ::std::os::raw::c_int,
    pub ItemsCount: ::std::os::raw::c_int,
    pub ItemsHeight: f32,
    pub StartPosY: f32,
    pub StartSeekOffsetY: f64,
    pub TempData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiListClipper() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiListClipper> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiListClipper>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiListClipper))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiListClipper>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiListClipper))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(Ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayStart) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(DisplayStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayEnd) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(DisplayEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemsCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(ItemsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemsHeight) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(ItemsHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StartPosY) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(StartPosY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StartSeekOffsetY) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(StartSeekOffsetY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TempData) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(TempData)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?Begin@ImGuiListClipper@@QEAAXHM@Z"]
    pub fn ImGuiListClipper_Begin(
        this: *mut ImGuiListClipper,
        items_count: ::std::os::raw::c_int,
        items_height: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?End@ImGuiListClipper@@QEAAXXZ"]
    pub fn ImGuiListClipper_End(this: *mut ImGuiListClipper);
}
extern "C" {
    #[link_name = "\u{1}?Step@ImGuiListClipper@@QEAA_NXZ"]
    pub fn ImGuiListClipper_Step(this: *mut ImGuiListClipper) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?IncludeItemsByIndex@ImGuiListClipper@@QEAAXHH@Z"]
    pub fn ImGuiListClipper_IncludeItemsByIndex(
        this: *mut ImGuiListClipper,
        item_begin: ::std::os::raw::c_int,
        item_end: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?SeekCursorForItem@ImGuiListClipper@@QEAAXH@Z"]
    pub fn ImGuiListClipper_SeekCursorForItem(
        this: *mut ImGuiListClipper,
        item_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiListClipper@@QEAA@XZ"]
    pub fn ImGuiListClipper_ImGuiListClipper(this: *mut ImGuiListClipper);
}
extern "C" {
    #[link_name = "\u{1}??_DImGuiListClipper@@QEAAXXZ"]
    pub fn ImGuiListClipper_ImGuiListClipper_destructor(this: *mut ImGuiListClipper);
}
impl ImGuiListClipper {
    #[inline]
    pub unsafe fn Begin(&mut self, items_count: ::std::os::raw::c_int, items_height: f32) {
        ImGuiListClipper_Begin(self, items_count, items_height)
    }
    #[inline]
    pub unsafe fn End(&mut self) {
        ImGuiListClipper_End(self)
    }
    #[inline]
    pub unsafe fn Step(&mut self) -> bool {
        ImGuiListClipper_Step(self)
    }
    #[inline]
    pub unsafe fn IncludeItemsByIndex(
        &mut self,
        item_begin: ::std::os::raw::c_int,
        item_end: ::std::os::raw::c_int,
    ) {
        ImGuiListClipper_IncludeItemsByIndex(self, item_begin, item_end)
    }
    #[inline]
    pub unsafe fn SeekCursorForItem(&mut self, item_index: ::std::os::raw::c_int) {
        ImGuiListClipper_SeekCursorForItem(self, item_index)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiListClipper_ImGuiListClipper(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImGuiListClipper_ImGuiListClipper_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImColor {
    pub Value: ImVec4,
}
#[test]
fn bindgen_test_layout_ImColor() {
    const UNINIT: ::std::mem::MaybeUninit<ImColor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImColor>(),
        16usize,
        concat!("Size of: ", stringify!(ImColor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImColor>(),
        4usize,
        concat!("Alignment of ", stringify!(ImColor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImColor),
            "::",
            stringify!(Value)
        )
    );
}
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_None: ImGuiMultiSelectFlags_ = 0;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_SingleSelect: ImGuiMultiSelectFlags_ = 1;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoSelectAll: ImGuiMultiSelectFlags_ = 2;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoRangeSelect: ImGuiMultiSelectFlags_ = 4;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoAutoSelect: ImGuiMultiSelectFlags_ = 8;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoAutoClear: ImGuiMultiSelectFlags_ = 16;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoAutoClearOnReselect:
    ImGuiMultiSelectFlags_ = 32;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_BoxSelect1d: ImGuiMultiSelectFlags_ = 64;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_BoxSelect2d: ImGuiMultiSelectFlags_ = 128;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_BoxSelectNoScroll: ImGuiMultiSelectFlags_ =
    256;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_ClearOnEscape: ImGuiMultiSelectFlags_ = 512;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_ClearOnClickVoid: ImGuiMultiSelectFlags_ =
    1024;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_ScopeWindow: ImGuiMultiSelectFlags_ = 2048;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_ScopeRect: ImGuiMultiSelectFlags_ = 4096;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_SelectOnClick: ImGuiMultiSelectFlags_ = 8192;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_SelectOnClickRelease:
    ImGuiMultiSelectFlags_ = 16384;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NavWrapX: ImGuiMultiSelectFlags_ = 65536;
pub type ImGuiMultiSelectFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiMultiSelectIO {
    pub Requests: ImVector<ImGuiSelectionRequest>,
    pub RangeSrcItem: ImGuiSelectionUserData,
    pub NavIdItem: ImGuiSelectionUserData,
    pub NavIdSelected: bool,
    pub RangeSrcReset: bool,
    pub ItemsCount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiMultiSelectIO() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiMultiSelectIO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiMultiSelectIO>(),
        40usize,
        concat!("Size of: ", stringify!(ImGuiMultiSelectIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiMultiSelectIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiMultiSelectIO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Requests) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMultiSelectIO),
            "::",
            stringify!(Requests)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RangeSrcItem) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMultiSelectIO),
            "::",
            stringify!(RangeSrcItem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavIdItem) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMultiSelectIO),
            "::",
            stringify!(NavIdItem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NavIdSelected) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMultiSelectIO),
            "::",
            stringify!(NavIdSelected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RangeSrcReset) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMultiSelectIO),
            "::",
            stringify!(RangeSrcReset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemsCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMultiSelectIO),
            "::",
            stringify!(ItemsCount)
        )
    );
}
pub const ImGuiSelectionRequestType_ImGuiSelectionRequestType_None: ImGuiSelectionRequestType = 0;
pub const ImGuiSelectionRequestType_ImGuiSelectionRequestType_SetAll: ImGuiSelectionRequestType = 1;
pub const ImGuiSelectionRequestType_ImGuiSelectionRequestType_SetRange: ImGuiSelectionRequestType =
    2;
pub type ImGuiSelectionRequestType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSelectionRequest {
    pub Type: ImGuiSelectionRequestType,
    pub Selected: bool,
    pub RangeDirection: ImS8,
    pub RangeFirstItem: ImGuiSelectionUserData,
    pub RangeLastItem: ImGuiSelectionUserData,
}
#[test]
fn bindgen_test_layout_ImGuiSelectionRequest() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiSelectionRequest> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiSelectionRequest>(),
        24usize,
        concat!("Size of: ", stringify!(ImGuiSelectionRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSelectionRequest>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSelectionRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSelectionRequest),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Selected) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSelectionRequest),
            "::",
            stringify!(Selected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RangeDirection) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSelectionRequest),
            "::",
            stringify!(RangeDirection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RangeFirstItem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSelectionRequest),
            "::",
            stringify!(RangeFirstItem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RangeLastItem) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSelectionRequest),
            "::",
            stringify!(RangeLastItem)
        )
    );
}
#[repr(C)]
pub struct ImGuiSelectionBasicStorage {
    pub Size: ::std::os::raw::c_int,
    pub PreserveOrder: bool,
    pub UserData: *mut ::std::os::raw::c_void,
    pub AdapterIndexToStorageId: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ImGuiSelectionBasicStorage,
            idx: ::std::os::raw::c_int,
        ) -> ImGuiID,
    >,
    pub _SelectionOrder: ::std::os::raw::c_int,
    pub _Storage: ImGuiStorage,
}
#[test]
fn bindgen_test_layout_ImGuiSelectionBasicStorage() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiSelectionBasicStorage> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiSelectionBasicStorage>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiSelectionBasicStorage))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSelectionBasicStorage>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSelectionBasicStorage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSelectionBasicStorage),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PreserveOrder) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSelectionBasicStorage),
            "::",
            stringify!(PreserveOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSelectionBasicStorage),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AdapterIndexToStorageId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSelectionBasicStorage),
            "::",
            stringify!(AdapterIndexToStorageId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._SelectionOrder) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSelectionBasicStorage),
            "::",
            stringify!(_SelectionOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Storage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSelectionBasicStorage),
            "::",
            stringify!(_Storage)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?ApplyRequests@ImGuiSelectionBasicStorage@@QEAAXPEAUImGuiMultiSelectIO@@@Z"]
    pub fn ImGuiSelectionBasicStorage_ApplyRequests(
        this: *mut ImGuiSelectionBasicStorage,
        ms_io: *mut ImGuiMultiSelectIO,
    );
}
extern "C" {
    #[link_name = "\u{1}?Contains@ImGuiSelectionBasicStorage@@QEBA_NI@Z"]
    pub fn ImGuiSelectionBasicStorage_Contains(
        this: *const ImGuiSelectionBasicStorage,
        id: ImGuiID,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?Clear@ImGuiSelectionBasicStorage@@QEAAXXZ"]
    pub fn ImGuiSelectionBasicStorage_Clear(this: *mut ImGuiSelectionBasicStorage);
}
extern "C" {
    #[link_name = "\u{1}?Swap@ImGuiSelectionBasicStorage@@QEAAXAEAU1@@Z"]
    pub fn ImGuiSelectionBasicStorage_Swap(
        this: *mut ImGuiSelectionBasicStorage,
        r: *mut ImGuiSelectionBasicStorage,
    );
}
extern "C" {
    #[link_name = "\u{1}?SetItemSelected@ImGuiSelectionBasicStorage@@QEAAXI_N@Z"]
    pub fn ImGuiSelectionBasicStorage_SetItemSelected(
        this: *mut ImGuiSelectionBasicStorage,
        id: ImGuiID,
        selected: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?GetNextSelectedItem@ImGuiSelectionBasicStorage@@QEAA_NPEAPEAXPEAI@Z"]
    pub fn ImGuiSelectionBasicStorage_GetNextSelectedItem(
        this: *mut ImGuiSelectionBasicStorage,
        opaque_it: *mut *mut ::std::os::raw::c_void,
        out_id: *mut ImGuiID,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiSelectionBasicStorage@@QEAA@XZ"]
    pub fn ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage(
        this: *mut ImGuiSelectionBasicStorage,
    );
}
impl ImGuiSelectionBasicStorage {
    #[inline]
    pub unsafe fn ApplyRequests(&mut self, ms_io: *mut ImGuiMultiSelectIO) {
        ImGuiSelectionBasicStorage_ApplyRequests(self, ms_io)
    }
    #[inline]
    pub unsafe fn Contains(&self, id: ImGuiID) -> bool {
        ImGuiSelectionBasicStorage_Contains(self, id)
    }
    #[inline]
    pub unsafe fn Clear(&mut self) {
        ImGuiSelectionBasicStorage_Clear(self)
    }
    #[inline]
    pub unsafe fn Swap(&mut self, r: *mut ImGuiSelectionBasicStorage) {
        ImGuiSelectionBasicStorage_Swap(self, r)
    }
    #[inline]
    pub unsafe fn SetItemSelected(&mut self, id: ImGuiID, selected: bool) {
        ImGuiSelectionBasicStorage_SetItemSelected(self, id, selected)
    }
    #[inline]
    pub unsafe fn GetNextSelectedItem(
        &mut self,
        opaque_it: *mut *mut ::std::os::raw::c_void,
        out_id: *mut ImGuiID,
    ) -> bool {
        ImGuiSelectionBasicStorage_GetNextSelectedItem(self, opaque_it, out_id)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSelectionExternalStorage {
    pub UserData: *mut ::std::os::raw::c_void,
    pub AdapterSetItemSelected: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ImGuiSelectionExternalStorage,
            idx: ::std::os::raw::c_int,
            selected: bool,
        ),
    >,
}
#[test]
fn bindgen_test_layout_ImGuiSelectionExternalStorage() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiSelectionExternalStorage> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiSelectionExternalStorage>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiSelectionExternalStorage))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSelectionExternalStorage>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSelectionExternalStorage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSelectionExternalStorage),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AdapterSetItemSelected) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSelectionExternalStorage),
            "::",
            stringify!(AdapterSetItemSelected)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?ApplyRequests@ImGuiSelectionExternalStorage@@QEAAXPEAUImGuiMultiSelectIO@@@Z"]
    pub fn ImGuiSelectionExternalStorage_ApplyRequests(
        this: *mut ImGuiSelectionExternalStorage,
        ms_io: *mut ImGuiMultiSelectIO,
    );
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiSelectionExternalStorage@@QEAA@XZ"]
    pub fn ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage(
        this: *mut ImGuiSelectionExternalStorage,
    );
}
impl ImGuiSelectionExternalStorage {
    #[inline]
    pub unsafe fn ApplyRequests(&mut self, ms_io: *mut ImGuiMultiSelectIO) {
        ImGuiSelectionExternalStorage_ApplyRequests(self, ms_io)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
pub type ImDrawCallback = ::std::option::Option<
    unsafe extern "C" fn(parent_list: *const ImDrawList, cmd: *const ImDrawCmd),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmd {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
    pub IdxOffset: ::std::os::raw::c_uint,
    pub ElemCount: ::std::os::raw::c_uint,
    pub UserCallback: ImDrawCallback,
    pub UserCallbackData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImDrawCmd() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawCmd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawCmd>(),
        56usize,
        concat!("Size of: ", stringify!(ImDrawCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawCmd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(TextureId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VtxOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(VtxOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IdxOffset) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(IdxOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ElemCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(ElemCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserCallback) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(UserCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserCallbackData) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(UserCallbackData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawVert {
    pub pos: ImVec2,
    pub uv: ImVec2,
    pub col: ImU32,
}
#[test]
fn bindgen_test_layout_ImDrawVert() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawVert> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawVert>(),
        20usize,
        concat!("Size of: ", stringify!(ImDrawVert))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawVert>(),
        4usize,
        concat!("Alignment of ", stringify!(ImDrawVert))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert),
            "::",
            stringify!(uv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawVert),
            "::",
            stringify!(col)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmdHeader {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ImDrawCmdHeader() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawCmdHeader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawCmdHeader>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawCmdHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawCmdHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawCmdHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader),
            "::",
            stringify!(TextureId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VtxOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader),
            "::",
            stringify!(VtxOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawChannel {
    pub _CmdBuffer: ImVector<ImDrawCmd>,
    pub _IdxBuffer: ImVector<ImDrawIdx>,
}
#[test]
fn bindgen_test_layout_ImDrawChannel() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawChannel> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawChannel>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawChannel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._CmdBuffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawChannel),
            "::",
            stringify!(_CmdBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IdxBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawChannel),
            "::",
            stringify!(_IdxBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawListSplitter {
    pub _Current: ::std::os::raw::c_int,
    pub _Count: ::std::os::raw::c_int,
    pub _Channels: ImVector<ImDrawChannel>,
}
#[test]
fn bindgen_test_layout_ImDrawListSplitter() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawListSplitter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawListSplitter>(),
        24usize,
        concat!("Size of: ", stringify!(ImDrawListSplitter))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawListSplitter>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawListSplitter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Current) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Channels) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Channels)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ"]
    pub fn ImDrawListSplitter_ClearFreeMemory(this: *mut ImDrawListSplitter);
}
extern "C" {
    #[link_name = "\u{1}?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z"]
    pub fn ImDrawListSplitter_Split(
        this: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z"]
    pub fn ImDrawListSplitter_Merge(this: *mut ImDrawListSplitter, draw_list: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z"]
    pub fn ImDrawListSplitter_SetCurrentChannel(
        this: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    );
}
impl ImDrawListSplitter {
    #[inline]
    pub unsafe fn ClearFreeMemory(&mut self) {
        ImDrawListSplitter_ClearFreeMemory(self)
    }
    #[inline]
    pub unsafe fn Split(&mut self, draw_list: *mut ImDrawList, count: ::std::os::raw::c_int) {
        ImDrawListSplitter_Split(self, draw_list, count)
    }
    #[inline]
    pub unsafe fn Merge(&mut self, draw_list: *mut ImDrawList) {
        ImDrawListSplitter_Merge(self, draw_list)
    }
    #[inline]
    pub unsafe fn SetCurrentChannel(
        &mut self,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    ) {
        ImDrawListSplitter_SetCurrentChannel(self, draw_list, channel_idx)
    }
}
pub const ImDrawFlags__ImDrawFlags_None: ImDrawFlags_ = 0;
pub const ImDrawFlags__ImDrawFlags_Closed: ImDrawFlags_ = 1;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTopLeft: ImDrawFlags_ = 16;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTopRight: ImDrawFlags_ = 32;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottomLeft: ImDrawFlags_ = 64;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottomRight: ImDrawFlags_ = 128;
pub const ImDrawFlags__ImDrawFlags_RoundCornersNone: ImDrawFlags_ = 256;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTop: ImDrawFlags_ = 48;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottom: ImDrawFlags_ = 192;
pub const ImDrawFlags__ImDrawFlags_RoundCornersLeft: ImDrawFlags_ = 80;
pub const ImDrawFlags__ImDrawFlags_RoundCornersRight: ImDrawFlags_ = 160;
pub const ImDrawFlags__ImDrawFlags_RoundCornersAll: ImDrawFlags_ = 240;
pub const ImDrawFlags__ImDrawFlags_RoundCornersDefault_: ImDrawFlags_ = 240;
pub const ImDrawFlags__ImDrawFlags_RoundCornersMask_: ImDrawFlags_ = 496;
pub type ImDrawFlags_ = ::std::os::raw::c_int;
pub const ImDrawListFlags__ImDrawListFlags_None: ImDrawListFlags_ = 0;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLines: ImDrawListFlags_ = 1;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLinesUseTex: ImDrawListFlags_ = 2;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedFill: ImDrawListFlags_ = 4;
pub const ImDrawListFlags__ImDrawListFlags_AllowVtxOffset: ImDrawListFlags_ = 8;
pub type ImDrawListFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawList {
    pub CmdBuffer: ImVector<ImDrawCmd>,
    pub IdxBuffer: ImVector<ImDrawIdx>,
    pub VtxBuffer: ImVector<ImDrawVert>,
    pub Flags: ImDrawListFlags,
    pub _VtxCurrentIdx: ::std::os::raw::c_uint,
    pub _Data: *mut ImDrawListSharedData,
    pub _VtxWritePtr: *mut ImDrawVert,
    pub _IdxWritePtr: *mut ImDrawIdx,
    pub _Path: ImVector<ImVec2>,
    pub _CmdHeader: ImDrawCmdHeader,
    pub _Splitter: ImDrawListSplitter,
    pub _ClipRectStack: ImVector<ImVec4>,
    pub _TextureIdStack: ImVector<ImTextureID>,
    pub _FringeScale: f32,
    pub _OwnerName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImDrawList() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawList>(),
        200usize,
        concat!("Size of: ", stringify!(ImDrawList))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawList>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CmdBuffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(CmdBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IdxBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(IdxBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VtxBuffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(VtxBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._VtxCurrentIdx) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_VtxCurrentIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Data) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_Data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._VtxWritePtr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_VtxWritePtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IdxWritePtr) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_IdxWritePtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Path) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_Path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._CmdHeader) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_CmdHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Splitter) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_Splitter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ClipRectStack) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_ClipRectStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._TextureIdStack) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_TextureIdStack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._FringeScale) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_FringeScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._OwnerName) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_OwnerName)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z"]
    pub fn ImDrawList_PushClipRect(
        this: *mut ImDrawList,
        clip_rect_min: *const ImVec2,
        clip_rect_max: *const ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?PushClipRectFullScreen@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList_PushClipRectFullScreen(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?PopClipRect@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList_PopClipRect(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?PushTextureID@ImDrawList@@QEAAXPEAX@Z"]
    pub fn ImDrawList_PushTextureID(this: *mut ImDrawList, texture_id: ImTextureID);
}
extern "C" {
    #[link_name = "\u{1}?PopTextureID@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList_PopTextureID(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z"]
    pub fn ImDrawList_AddLine(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z"]
    pub fn ImDrawList_AddRect(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z"]
    pub fn ImDrawList_AddRectFilled(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z"]
    pub fn ImDrawList_AddRectFilledMultiColor(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z"]
    pub fn ImDrawList_AddQuad(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z"]
    pub fn ImDrawList_AddQuadFilled(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z"]
    pub fn ImDrawList_AddTriangle(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z"]
    pub fn ImDrawList_AddTriangleFilled(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z"]
    pub fn ImDrawList_AddCircle(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z"]
    pub fn ImDrawList_AddCircleFilled(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z"]
    pub fn ImDrawList_AddNgon(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z"]
    pub fn ImDrawList_AddNgonFilled(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddEllipse@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z"]
    pub fn ImDrawList_AddEllipse(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddEllipseFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z"]
    pub fn ImDrawList_AddEllipseFilled(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z"]
    pub fn ImDrawList_AddText(
        this: *mut ImDrawList,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z"]
    pub fn ImDrawList_AddText1(
        this: *mut ImDrawList,
        font: *const ImFont,
        font_size: f32,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z"]
    pub fn ImDrawList_AddBezierCubic(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z"]
    pub fn ImDrawList_AddBezierQuadratic(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z"]
    pub fn ImDrawList_AddPolyline(
        this: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z"]
    pub fn ImDrawList_AddConvexPolyFilled(
        this: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddConcavePolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z"]
    pub fn ImDrawList_AddConcavePolyFilled(
        this: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z"]
    pub fn ImDrawList_AddImage(
        this: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z"]
    pub fn ImDrawList_AddImageQuad(
        this: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        uv1: *const ImVec2,
        uv2: *const ImVec2,
        uv3: *const ImVec2,
        uv4: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z"]
    pub fn ImDrawList_AddImageRounded(
        this: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z"]
    pub fn ImDrawList_PathArcTo(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z"]
    pub fn ImDrawList_PathArcToFast(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PathEllipticalArcTo@ImDrawList@@QEAAXAEBUImVec2@@0MMMH@Z"]
    pub fn ImDrawList_PathEllipticalArcTo(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: *const ImVec2,
        rot: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z"]
    pub fn ImDrawList_PathBezierCubicCurveTo(
        this: *mut ImDrawList,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z"]
    pub fn ImDrawList_PathBezierQuadraticCurveTo(
        this: *mut ImDrawList,
        p2: *const ImVec2,
        p3: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z"]
    pub fn ImDrawList_PathRect(
        this: *mut ImDrawList,
        rect_min: *const ImVec2,
        rect_max: *const ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z"]
    pub fn ImDrawList_AddCallback(
        this: *mut ImDrawList,
        callback: ImDrawCallback,
        callback_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddDrawCmd@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList_AddDrawCmd(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?CloneOutput@ImDrawList@@QEBAPEAU1@XZ"]
    pub fn ImDrawList_CloneOutput(this: *const ImDrawList) -> *mut ImDrawList;
}
extern "C" {
    #[link_name = "\u{1}?PrimReserve@ImDrawList@@QEAAXHH@Z"]
    pub fn ImDrawList_PrimReserve(
        this: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PrimUnreserve@ImDrawList@@QEAAXHH@Z"]
    pub fn ImDrawList_PrimUnreserve(
        this: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z"]
    pub fn ImDrawList_PrimRect(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z"]
    pub fn ImDrawList_PrimRectUV(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z"]
    pub fn ImDrawList_PrimQuadUV(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        d: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        uv_c: *const ImVec2,
        uv_d: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}?_ResetForNewFrame@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__ResetForNewFrame(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?_ClearFreeMemory@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__ClearFreeMemory(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__PopUnusedDrawCmd(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__TryMergeDrawCmds(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?_OnChangedClipRect@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__OnChangedClipRect(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?_OnChangedTextureID@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__OnChangedTextureID(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__OnChangedVtxOffset(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?_SetTextureID@ImDrawList@@QEAAXPEAX@Z"]
    pub fn ImDrawList__SetTextureID(this: *mut ImDrawList, texture_id: ImTextureID);
}
extern "C" {
    #[link_name = "\u{1}?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z"]
    pub fn ImDrawList__CalcCircleAutoSegmentCount(
        this: *const ImDrawList,
        radius: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z"]
    pub fn ImDrawList__PathArcToFastEx(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min_sample: ::std::os::raw::c_int,
        a_max_sample: ::std::os::raw::c_int,
        a_step: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z"]
    pub fn ImDrawList__PathArcToN(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
impl ImDrawList {
    #[inline]
    pub unsafe fn PushClipRect(
        &mut self,
        clip_rect_min: *const ImVec2,
        clip_rect_max: *const ImVec2,
        intersect_with_current_clip_rect: bool,
    ) {
        ImDrawList_PushClipRect(
            self,
            clip_rect_min,
            clip_rect_max,
            intersect_with_current_clip_rect,
        )
    }
    #[inline]
    pub unsafe fn PushClipRectFullScreen(&mut self) {
        ImDrawList_PushClipRectFullScreen(self)
    }
    #[inline]
    pub unsafe fn PopClipRect(&mut self) {
        ImDrawList_PopClipRect(self)
    }
    #[inline]
    pub unsafe fn PushTextureID(&mut self, texture_id: ImTextureID) {
        ImDrawList_PushTextureID(self, texture_id)
    }
    #[inline]
    pub unsafe fn PopTextureID(&mut self) {
        ImDrawList_PopTextureID(self)
    }
    #[inline]
    pub unsafe fn AddLine(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddLine(self, p1, p2, col, thickness)
    }
    #[inline]
    pub unsafe fn AddRect(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
        thickness: f32,
    ) {
        ImDrawList_AddRect(self, p_min, p_max, col, rounding, flags, thickness)
    }
    #[inline]
    pub unsafe fn AddRectFilled(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    ) {
        ImDrawList_AddRectFilled(self, p_min, p_max, col, rounding, flags)
    }
    #[inline]
    pub unsafe fn AddRectFilledMultiColor(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    ) {
        ImDrawList_AddRectFilledMultiColor(
            self,
            p_min,
            p_max,
            col_upr_left,
            col_upr_right,
            col_bot_right,
            col_bot_left,
        )
    }
    #[inline]
    pub unsafe fn AddQuad(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddQuad(self, p1, p2, p3, p4, col, thickness)
    }
    #[inline]
    pub unsafe fn AddQuadFilled(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddQuadFilled(self, p1, p2, p3, p4, col)
    }
    #[inline]
    pub unsafe fn AddTriangle(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddTriangle(self, p1, p2, p3, col, thickness)
    }
    #[inline]
    pub unsafe fn AddTriangleFilled(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddTriangleFilled(self, p1, p2, p3, col)
    }
    #[inline]
    pub unsafe fn AddCircle(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    ) {
        ImDrawList_AddCircle(self, center, radius, col, num_segments, thickness)
    }
    #[inline]
    pub unsafe fn AddCircleFilled(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddCircleFilled(self, center, radius, col, num_segments)
    }
    #[inline]
    pub unsafe fn AddNgon(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    ) {
        ImDrawList_AddNgon(self, center, radius, col, num_segments, thickness)
    }
    #[inline]
    pub unsafe fn AddNgonFilled(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddNgonFilled(self, center, radius, col, num_segments)
    }
    #[inline]
    pub unsafe fn AddEllipse(
        &mut self,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    ) {
        ImDrawList_AddEllipse(self, center, radius, col, rot, num_segments, thickness)
    }
    #[inline]
    pub unsafe fn AddEllipseFilled(
        &mut self,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddEllipseFilled(self, center, radius, col, rot, num_segments)
    }
    #[inline]
    pub unsafe fn AddText(
        &mut self,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImDrawList_AddText(self, pos, col, text_begin, text_end)
    }
    #[inline]
    pub unsafe fn AddText1(
        &mut self,
        font: *const ImFont,
        font_size: f32,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    ) {
        ImDrawList_AddText1(
            self,
            font,
            font_size,
            pos,
            col,
            text_begin,
            text_end,
            wrap_width,
            cpu_fine_clip_rect,
        )
    }
    #[inline]
    pub unsafe fn AddBezierCubic(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddBezierCubic(self, p1, p2, p3, p4, col, thickness, num_segments)
    }
    #[inline]
    pub unsafe fn AddBezierQuadratic(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddBezierQuadratic(self, p1, p2, p3, col, thickness, num_segments)
    }
    #[inline]
    pub unsafe fn AddPolyline(
        &mut self,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    ) {
        ImDrawList_AddPolyline(self, points, num_points, col, flags, thickness)
    }
    #[inline]
    pub unsafe fn AddConvexPolyFilled(
        &mut self,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    ) {
        ImDrawList_AddConvexPolyFilled(self, points, num_points, col)
    }
    #[inline]
    pub unsafe fn AddConcavePolyFilled(
        &mut self,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    ) {
        ImDrawList_AddConcavePolyFilled(self, points, num_points, col)
    }
    #[inline]
    pub unsafe fn AddImage(
        &mut self,
        user_texture_id: ImTextureID,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddImage(self, user_texture_id, p_min, p_max, uv_min, uv_max, col)
    }
    #[inline]
    pub unsafe fn AddImageQuad(
        &mut self,
        user_texture_id: ImTextureID,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        uv1: *const ImVec2,
        uv2: *const ImVec2,
        uv3: *const ImVec2,
        uv4: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddImageQuad(
            self,
            user_texture_id,
            p1,
            p2,
            p3,
            p4,
            uv1,
            uv2,
            uv3,
            uv4,
            col,
        )
    }
    #[inline]
    pub unsafe fn AddImageRounded(
        &mut self,
        user_texture_id: ImTextureID,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    ) {
        ImDrawList_AddImageRounded(
            self,
            user_texture_id,
            p_min,
            p_max,
            uv_min,
            uv_max,
            col,
            rounding,
            flags,
        )
    }
    #[inline]
    pub unsafe fn PathArcTo(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathArcTo(self, center, radius, a_min, a_max, num_segments)
    }
    #[inline]
    pub unsafe fn PathArcToFast(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathArcToFast(self, center, radius, a_min_of_12, a_max_of_12)
    }
    #[inline]
    pub unsafe fn PathEllipticalArcTo(
        &mut self,
        center: *const ImVec2,
        radius: *const ImVec2,
        rot: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathEllipticalArcTo(self, center, radius, rot, a_min, a_max, num_segments)
    }
    #[inline]
    pub unsafe fn PathBezierCubicCurveTo(
        &mut self,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathBezierCubicCurveTo(self, p2, p3, p4, num_segments)
    }
    #[inline]
    pub unsafe fn PathBezierQuadraticCurveTo(
        &mut self,
        p2: *const ImVec2,
        p3: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathBezierQuadraticCurveTo(self, p2, p3, num_segments)
    }
    #[inline]
    pub unsafe fn PathRect(
        &mut self,
        rect_min: *const ImVec2,
        rect_max: *const ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    ) {
        ImDrawList_PathRect(self, rect_min, rect_max, rounding, flags)
    }
    #[inline]
    pub unsafe fn AddCallback(
        &mut self,
        callback: ImDrawCallback,
        callback_data: *mut ::std::os::raw::c_void,
    ) {
        ImDrawList_AddCallback(self, callback, callback_data)
    }
    #[inline]
    pub unsafe fn AddDrawCmd(&mut self) {
        ImDrawList_AddDrawCmd(self)
    }
    #[inline]
    pub unsafe fn CloneOutput(&self) -> *mut ImDrawList {
        ImDrawList_CloneOutput(self)
    }
    #[inline]
    pub unsafe fn PrimReserve(
        &mut self,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    ) {
        ImDrawList_PrimReserve(self, idx_count, vtx_count)
    }
    #[inline]
    pub unsafe fn PrimUnreserve(
        &mut self,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    ) {
        ImDrawList_PrimUnreserve(self, idx_count, vtx_count)
    }
    #[inline]
    pub unsafe fn PrimRect(&mut self, a: *const ImVec2, b: *const ImVec2, col: ImU32) {
        ImDrawList_PrimRect(self, a, b, col)
    }
    #[inline]
    pub unsafe fn PrimRectUV(
        &mut self,
        a: *const ImVec2,
        b: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_PrimRectUV(self, a, b, uv_a, uv_b, col)
    }
    #[inline]
    pub unsafe fn PrimQuadUV(
        &mut self,
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        d: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        uv_c: *const ImVec2,
        uv_d: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_PrimQuadUV(self, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col)
    }
    #[inline]
    pub unsafe fn _ResetForNewFrame(&mut self) {
        ImDrawList__ResetForNewFrame(self)
    }
    #[inline]
    pub unsafe fn _ClearFreeMemory(&mut self) {
        ImDrawList__ClearFreeMemory(self)
    }
    #[inline]
    pub unsafe fn _PopUnusedDrawCmd(&mut self) {
        ImDrawList__PopUnusedDrawCmd(self)
    }
    #[inline]
    pub unsafe fn _TryMergeDrawCmds(&mut self) {
        ImDrawList__TryMergeDrawCmds(self)
    }
    #[inline]
    pub unsafe fn _OnChangedClipRect(&mut self) {
        ImDrawList__OnChangedClipRect(self)
    }
    #[inline]
    pub unsafe fn _OnChangedTextureID(&mut self) {
        ImDrawList__OnChangedTextureID(self)
    }
    #[inline]
    pub unsafe fn _OnChangedVtxOffset(&mut self) {
        ImDrawList__OnChangedVtxOffset(self)
    }
    #[inline]
    pub unsafe fn _SetTextureID(&mut self, texture_id: ImTextureID) {
        ImDrawList__SetTextureID(self, texture_id)
    }
    #[inline]
    pub unsafe fn _CalcCircleAutoSegmentCount(&self, radius: f32) -> ::std::os::raw::c_int {
        ImDrawList__CalcCircleAutoSegmentCount(self, radius)
    }
    #[inline]
    pub unsafe fn _PathArcToFastEx(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min_sample: ::std::os::raw::c_int,
        a_max_sample: ::std::os::raw::c_int,
        a_step: ::std::os::raw::c_int,
    ) {
        ImDrawList__PathArcToFastEx(self, center, radius, a_min_sample, a_max_sample, a_step)
    }
    #[inline]
    pub unsafe fn _PathArcToN(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList__PathArcToN(self, center, radius, a_min, a_max, num_segments)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawData {
    pub Valid: bool,
    pub CmdListsCount: ::std::os::raw::c_int,
    pub TotalIdxCount: ::std::os::raw::c_int,
    pub TotalVtxCount: ::std::os::raw::c_int,
    pub CmdLists: ImVector<*mut ImDrawList>,
    pub DisplayPos: ImVec2,
    pub DisplaySize: ImVec2,
    pub FramebufferScale: ImVec2,
    pub OwnerViewport: *mut ImGuiViewport,
}
#[test]
fn bindgen_test_layout_ImDrawData() {
    const UNINIT: ::std::mem::MaybeUninit<ImDrawData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImDrawData>(),
        64usize,
        concat!("Size of: ", stringify!(ImDrawData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Valid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(Valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CmdListsCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(CmdListsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalIdxCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(TotalIdxCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalVtxCount) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(TotalVtxCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CmdLists) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(CmdLists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplayPos) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(DisplayPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisplaySize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(DisplaySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FramebufferScale) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(FramebufferScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnerViewport) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(OwnerViewport)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?Clear@ImDrawData@@QEAAXXZ"]
    pub fn ImDrawData_Clear(this: *mut ImDrawData);
}
extern "C" {
    #[link_name = "\u{1}?AddDrawList@ImDrawData@@QEAAXPEAUImDrawList@@@Z"]
    pub fn ImDrawData_AddDrawList(this: *mut ImDrawData, draw_list: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}?DeIndexAllBuffers@ImDrawData@@QEAAXXZ"]
    pub fn ImDrawData_DeIndexAllBuffers(this: *mut ImDrawData);
}
extern "C" {
    #[link_name = "\u{1}?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z"]
    pub fn ImDrawData_ScaleClipRects(this: *mut ImDrawData, fb_scale: *const ImVec2);
}
impl ImDrawData {
    #[inline]
    pub unsafe fn Clear(&mut self) {
        ImDrawData_Clear(self)
    }
    #[inline]
    pub unsafe fn AddDrawList(&mut self, draw_list: *mut ImDrawList) {
        ImDrawData_AddDrawList(self, draw_list)
    }
    #[inline]
    pub unsafe fn DeIndexAllBuffers(&mut self) {
        ImDrawData_DeIndexAllBuffers(self)
    }
    #[inline]
    pub unsafe fn ScaleClipRects(&mut self, fb_scale: *const ImVec2) {
        ImDrawData_ScaleClipRects(self, fb_scale)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontConfig {
    pub FontData: *mut ::std::os::raw::c_void,
    pub FontDataSize: ::std::os::raw::c_int,
    pub FontDataOwnedByAtlas: bool,
    pub FontNo: ::std::os::raw::c_int,
    pub SizePixels: f32,
    pub OversampleH: ::std::os::raw::c_int,
    pub OversampleV: ::std::os::raw::c_int,
    pub PixelSnapH: bool,
    pub GlyphExtraSpacing: ImVec2,
    pub GlyphOffset: ImVec2,
    pub GlyphRanges: *const ImWchar,
    pub GlyphMinAdvanceX: f32,
    pub GlyphMaxAdvanceX: f32,
    pub MergeMode: bool,
    pub FontBuilderFlags: ::std::os::raw::c_uint,
    pub RasterizerMultiply: f32,
    pub RasterizerDensity: f32,
    pub EllipsisChar: ImWchar,
    pub Name: [::std::os::raw::c_char; 40usize],
    pub DstFont: *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImFontConfig() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontConfig>(),
        144usize,
        concat!("Size of: ", stringify!(ImFontConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontDataSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontDataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontDataOwnedByAtlas) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontDataOwnedByAtlas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontNo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontNo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizePixels) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(SizePixels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OversampleH) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(OversampleH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OversampleV) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(OversampleV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PixelSnapH) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(PixelSnapH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphExtraSpacing) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphExtraSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphOffset) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphRanges) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphRanges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphMinAdvanceX) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphMinAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphMaxAdvanceX) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphMaxAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MergeMode) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(MergeMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontBuilderFlags) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontBuilderFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RasterizerMultiply) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(RasterizerMultiply)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RasterizerDensity) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(RasterizerDensity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisChar) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(EllipsisChar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DstFont) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(DstFont)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}??0ImFontConfig@@QEAA@XZ"]
    pub fn ImFontConfig_ImFontConfig(this: *mut ImFontConfig);
}
impl ImFontConfig {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFontConfig_ImFontConfig(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontGlyph {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub AdvanceX: f32,
    pub X0: f32,
    pub Y0: f32,
    pub X1: f32,
    pub Y1: f32,
    pub U0: f32,
    pub V0: f32,
    pub U1: f32,
    pub V1: f32,
}
#[test]
fn bindgen_test_layout_ImFontGlyph() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontGlyph> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontGlyph>(),
        40usize,
        concat!("Size of: ", stringify!(ImFontGlyph))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontGlyph>(),
        4usize,
        concat!("Alignment of ", stringify!(ImFontGlyph))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AdvanceX) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(AdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(X0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(Y0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(X1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(Y1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).U0) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(U0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).V0) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(V0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).U1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(U1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).V1) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyph),
            "::",
            stringify!(V1)
        )
    );
}
impl ImFontGlyph {
    #[inline]
    pub fn Colored(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Colored(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Visible(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Visible(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Codepoint(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_Codepoint(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Colored: ::std::os::raw::c_uint,
        Visible: ::std::os::raw::c_uint,
        Codepoint: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Colored: u32 = unsafe { ::std::mem::transmute(Colored) };
            Colored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Visible: u32 = unsafe { ::std::mem::transmute(Visible) };
            Visible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let Codepoint: u32 = unsafe { ::std::mem::transmute(Codepoint) };
            Codepoint as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImFontGlyphRangesBuilder {
    pub UsedChars: ImVector<ImU32>,
}
#[test]
fn bindgen_test_layout_ImFontGlyphRangesBuilder() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontGlyphRangesBuilder> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontGlyphRangesBuilder>(),
        16usize,
        concat!("Size of: ", stringify!(ImFontGlyphRangesBuilder))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontGlyphRangesBuilder>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontGlyphRangesBuilder))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UsedChars) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyphRangesBuilder),
            "::",
            stringify!(UsedChars)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z"]
    pub fn ImFontGlyphRangesBuilder_AddText(
        this: *mut ImFontGlyphRangesBuilder,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z"]
    pub fn ImFontGlyphRangesBuilder_AddRanges(
        this: *mut ImFontGlyphRangesBuilder,
        ranges: *const ImWchar,
    );
}
extern "C" {
    #[link_name = "\u{1}?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z"]
    pub fn ImFontGlyphRangesBuilder_BuildRanges(
        this: *mut ImFontGlyphRangesBuilder,
        out_ranges: *mut ImVector<ImWchar>,
    );
}
impl ImFontGlyphRangesBuilder {
    #[inline]
    pub unsafe fn AddText(
        &mut self,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImFontGlyphRangesBuilder_AddText(self, text, text_end)
    }
    #[inline]
    pub unsafe fn AddRanges(&mut self, ranges: *const ImWchar) {
        ImFontGlyphRangesBuilder_AddRanges(self, ranges)
    }
    #[inline]
    pub unsafe fn BuildRanges(&mut self, out_ranges: *mut ImVector<ImWchar>) {
        ImFontGlyphRangesBuilder_BuildRanges(self, out_ranges)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontAtlasCustomRect {
    pub Width: ::std::os::raw::c_ushort,
    pub Height: ::std::os::raw::c_ushort,
    pub X: ::std::os::raw::c_ushort,
    pub Y: ::std::os::raw::c_ushort,
    pub GlyphID: ::std::os::raw::c_uint,
    pub GlyphAdvanceX: f32,
    pub GlyphOffset: ImVec2,
    pub Font: *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImFontAtlasCustomRect() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontAtlasCustomRect> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontAtlasCustomRect>(),
        32usize,
        concat!("Size of: ", stringify!(ImFontAtlasCustomRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontAtlasCustomRect>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontAtlasCustomRect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphAdvanceX) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GlyphOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Font) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Font)
        )
    );
}
pub const ImFontAtlasFlags__ImFontAtlasFlags_None: ImFontAtlasFlags_ = 0;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoPowerOfTwoHeight: ImFontAtlasFlags_ = 1;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoMouseCursors: ImFontAtlasFlags_ = 2;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoBakedLines: ImFontAtlasFlags_ = 4;
pub type ImFontAtlasFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct ImFontAtlas {
    pub Flags: ImFontAtlasFlags,
    pub TexID: ImTextureID,
    pub TexDesiredWidth: ::std::os::raw::c_int,
    pub TexGlyphPadding: ::std::os::raw::c_int,
    pub Locked: bool,
    pub UserData: *mut ::std::os::raw::c_void,
    pub TexReady: bool,
    pub TexPixelsUseColors: bool,
    pub TexPixelsAlpha8: *mut ::std::os::raw::c_uchar,
    pub TexPixelsRGBA32: *mut ::std::os::raw::c_uint,
    pub TexWidth: ::std::os::raw::c_int,
    pub TexHeight: ::std::os::raw::c_int,
    pub TexUvScale: ImVec2,
    pub TexUvWhitePixel: ImVec2,
    pub Fonts: ImVector<*mut ImFont>,
    pub CustomRects: ImVector<ImFontAtlasCustomRect>,
    pub ConfigData: ImVector<ImFontConfig>,
    pub TexUvLines: [ImVec4; 64usize],
    pub FontBuilderIO: *const ImFontBuilderIO,
    pub FontBuilderFlags: ::std::os::raw::c_uint,
    pub PackIdMouseCursors: ::std::os::raw::c_int,
    pub PackIdLines: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImFontAtlas() {
    const UNINIT: ::std::mem::MaybeUninit<ImFontAtlas> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFontAtlas>(),
        1184usize,
        concat!("Size of: ", stringify!(ImFontAtlas))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontAtlas>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontAtlas))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexDesiredWidth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexDesiredWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexGlyphPadding) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexGlyphPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Locked) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(Locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexReady) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexReady)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexPixelsUseColors) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexPixelsUseColors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexPixelsAlpha8) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexPixelsAlpha8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexPixelsRGBA32) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexPixelsRGBA32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexWidth) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexHeight) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexUvScale) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexUvWhitePixel) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvWhitePixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Fonts) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(Fonts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CustomRects) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(CustomRects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigData) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(ConfigData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TexUvLines) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontBuilderIO) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(FontBuilderIO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontBuilderFlags) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(FontBuilderFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PackIdMouseCursors) as usize - ptr as usize },
        1172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(PackIdMouseCursors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PackIdLines) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(PackIdLines)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z"]
    pub fn ImFontAtlas_AddFont(
        this: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z"]
    pub fn ImFontAtlas_AddFontDefault(
        this: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z"]
    pub fn ImFontAtlas_AddFontFromFileTTF(
        this: *mut ImFontAtlas,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z"]
    pub fn ImFontAtlas_AddFontFromMemoryTTF(
        this: *mut ImFontAtlas,
        font_data: *mut ::std::os::raw::c_void,
        font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z"]
    pub fn ImFontAtlas_AddFontFromMemoryCompressedTTF(
        this: *mut ImFontAtlas,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z"]
    pub fn ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
        this: *mut ImFontAtlas,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}?ClearInputData@ImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_ClearInputData(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}?ClearTexData@ImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_ClearTexData(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}?ClearFonts@ImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_ClearFonts(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}?Clear@ImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_Clear(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}?Build@ImFontAtlas@@QEAA_NXZ"]
    pub fn ImFontAtlas_Build(this: *mut ImFontAtlas) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z"]
    pub fn ImFontAtlas_GetTexDataAsAlpha8(
        this: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z"]
    pub fn ImFontAtlas_GetTexDataAsRGBA32(
        this: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesDefault(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesGreek@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesGreek(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesKorean(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesJapanese(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesChineseFull(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(
        this: *mut ImFontAtlas,
    ) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesCyrillic(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesThai(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ"]
    pub fn ImFontAtlas_GetGlyphRangesVietnamese(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z"]
    pub fn ImFontAtlas_AddCustomRectRegular(
        this: *mut ImFontAtlas,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z"]
    pub fn ImFontAtlas_AddCustomRectFontGlyph(
        this: *mut ImFontAtlas,
        font: *mut ImFont,
        id: ImWchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        advance_x: f32,
        offset: *const ImVec2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z"]
    pub fn ImFontAtlas_CalcCustomRectUV(
        this: *const ImFontAtlas,
        rect: *const ImFontAtlasCustomRect,
        out_uv_min: *mut ImVec2,
        out_uv_max: *mut ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z"]
    pub fn ImFontAtlas_GetMouseCursorTexData(
        this: *mut ImFontAtlas,
        cursor: ImGuiMouseCursor,
        out_offset: *mut ImVec2,
        out_size: *mut ImVec2,
        out_uv_border: *mut ImVec2,
        out_uv_fill: *mut ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}??0ImFontAtlas@@QEAA@XZ"]
    pub fn ImFontAtlas_ImFontAtlas(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}??_DImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_ImFontAtlas_destructor(this: *mut ImFontAtlas);
}
impl ImFontAtlas {
    #[inline]
    pub unsafe fn AddFont(&mut self, font_cfg: *const ImFontConfig) -> *mut ImFont {
        ImFontAtlas_AddFont(self, font_cfg)
    }
    #[inline]
    pub unsafe fn AddFontDefault(&mut self, font_cfg: *const ImFontConfig) -> *mut ImFont {
        ImFontAtlas_AddFontDefault(self, font_cfg)
    }
    #[inline]
    pub unsafe fn AddFontFromFileTTF(
        &mut self,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromFileTTF(self, filename, size_pixels, font_cfg, glyph_ranges)
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryTTF(
        &mut self,
        font_data: *mut ::std::os::raw::c_void,
        font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryTTF(
            self,
            font_data,
            font_data_size,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryCompressedTTF(
        &mut self,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryCompressedTTF(
            self,
            compressed_font_data,
            compressed_font_data_size,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryCompressedBase85TTF(
        &mut self,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
            self,
            compressed_font_data_base85,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn ClearInputData(&mut self) {
        ImFontAtlas_ClearInputData(self)
    }
    #[inline]
    pub unsafe fn ClearTexData(&mut self) {
        ImFontAtlas_ClearTexData(self)
    }
    #[inline]
    pub unsafe fn ClearFonts(&mut self) {
        ImFontAtlas_ClearFonts(self)
    }
    #[inline]
    pub unsafe fn Clear(&mut self) {
        ImFontAtlas_Clear(self)
    }
    #[inline]
    pub unsafe fn Build(&mut self) -> bool {
        ImFontAtlas_Build(self)
    }
    #[inline]
    pub unsafe fn GetTexDataAsAlpha8(
        &mut self,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    ) {
        ImFontAtlas_GetTexDataAsAlpha8(self, out_pixels, out_width, out_height, out_bytes_per_pixel)
    }
    #[inline]
    pub unsafe fn GetTexDataAsRGBA32(
        &mut self,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    ) {
        ImFontAtlas_GetTexDataAsRGBA32(self, out_pixels, out_width, out_height, out_bytes_per_pixel)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesDefault(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesDefault(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesGreek(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesGreek(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesKorean(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesKorean(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesJapanese(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesJapanese(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesChineseFull(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesChineseFull(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesChineseSimplifiedCommon(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesCyrillic(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesCyrillic(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesThai(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesThai(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesVietnamese(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesVietnamese(self)
    }
    #[inline]
    pub unsafe fn AddCustomRectRegular(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        ImFontAtlas_AddCustomRectRegular(self, width, height)
    }
    #[inline]
    pub unsafe fn AddCustomRectFontGlyph(
        &mut self,
        font: *mut ImFont,
        id: ImWchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        advance_x: f32,
        offset: *const ImVec2,
    ) -> ::std::os::raw::c_int {
        ImFontAtlas_AddCustomRectFontGlyph(self, font, id, width, height, advance_x, offset)
    }
    #[inline]
    pub unsafe fn CalcCustomRectUV(
        &self,
        rect: *const ImFontAtlasCustomRect,
        out_uv_min: *mut ImVec2,
        out_uv_max: *mut ImVec2,
    ) {
        ImFontAtlas_CalcCustomRectUV(self, rect, out_uv_min, out_uv_max)
    }
    #[inline]
    pub unsafe fn GetMouseCursorTexData(
        &mut self,
        cursor: ImGuiMouseCursor,
        out_offset: *mut ImVec2,
        out_size: *mut ImVec2,
        out_uv_border: *mut ImVec2,
        out_uv_fill: *mut ImVec2,
    ) -> bool {
        ImFontAtlas_GetMouseCursorTexData(
            self,
            cursor,
            out_offset,
            out_size,
            out_uv_border,
            out_uv_fill,
        )
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFontAtlas_ImFontAtlas(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImFontAtlas_ImFontAtlas_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImFont {
    pub IndexAdvanceX: ImVector<f32>,
    pub FallbackAdvanceX: f32,
    pub FontSize: f32,
    pub IndexLookup: ImVector<ImWchar>,
    pub Glyphs: ImVector<ImFontGlyph>,
    pub FallbackGlyph: *const ImFontGlyph,
    pub ContainerAtlas: *mut ImFontAtlas,
    pub ConfigData: *const ImFontConfig,
    pub ConfigDataCount: ::std::os::raw::c_short,
    pub FallbackChar: ImWchar,
    pub EllipsisChar: ImWchar,
    pub EllipsisCharCount: ::std::os::raw::c_short,
    pub EllipsisWidth: f32,
    pub EllipsisCharStep: f32,
    pub DirtyLookupTables: bool,
    pub Scale: f32,
    pub Ascent: f32,
    pub Descent: f32,
    pub MetricsTotalSurface: ::std::os::raw::c_int,
    pub Used4kPagesMap: [ImU8; 2usize],
}
#[test]
fn bindgen_test_layout_ImFont() {
    const UNINIT: ::std::mem::MaybeUninit<ImFont> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImFont>(),
        120usize,
        concat!("Size of: ", stringify!(ImFont))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFont>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFont))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IndexAdvanceX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(IndexAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FallbackAdvanceX) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FallbackAdvanceX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FontSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FontSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IndexLookup) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(IndexLookup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Glyphs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Glyphs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FallbackGlyph) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FallbackGlyph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContainerAtlas) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(ContainerAtlas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigData) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(ConfigData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigDataCount) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(ConfigDataCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FallbackChar) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FallbackChar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisChar) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(EllipsisChar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisCharCount) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(EllipsisCharCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisWidth) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(EllipsisWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EllipsisCharStep) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(EllipsisCharStep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DirtyLookupTables) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(DirtyLookupTables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Scale) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ascent) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Ascent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Descent) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Descent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetricsTotalSurface) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(MetricsTotalSurface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Used4kPagesMap) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Used4kPagesMap)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z"]
    pub fn ImFont_FindGlyph(this: *const ImFont, c: ImWchar) -> *const ImFontGlyph;
}
extern "C" {
    #[link_name = "\u{1}?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z"]
    pub fn ImFont_FindGlyphNoFallback(this: *const ImFont, c: ImWchar) -> *const ImFontGlyph;
}
extern "C" {
    #[link_name = "\u{1}?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z"]
    pub fn ImFont_CalcTextSizeA(
        this: *const ImFont,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        remaining: *mut *const ::std::os::raw::c_char,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z"]
    pub fn ImFont_CalcWordWrapPositionA(
        this: *const ImFont,
        scale: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IG@Z"]
    pub fn ImFont_RenderChar(
        this: *const ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        c: ImWchar,
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z"]
    pub fn ImFont_RenderText(
        this: *const ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        clip_rect: *const ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?BuildLookupTable@ImFont@@QEAAXXZ"]
    pub fn ImFont_BuildLookupTable(this: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}?ClearOutputData@ImFont@@QEAAXXZ"]
    pub fn ImFont_ClearOutputData(this: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}?GrowIndex@ImFont@@QEAAXH@Z"]
    pub fn ImFont_GrowIndex(this: *mut ImFont, new_size: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z"]
    pub fn ImFont_AddGlyph(
        this: *mut ImFont,
        src_cfg: *const ImFontConfig,
        c: ImWchar,
        x0: f32,
        y0: f32,
        x1: f32,
        y1: f32,
        u0: f32,
        v0: f32,
        u1: f32,
        v1: f32,
        advance_x: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}?AddRemapChar@ImFont@@QEAAXGG_N@Z"]
    pub fn ImFont_AddRemapChar(this: *mut ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: bool);
}
extern "C" {
    #[link_name = "\u{1}?SetGlyphVisible@ImFont@@QEAAXG_N@Z"]
    pub fn ImFont_SetGlyphVisible(this: *mut ImFont, c: ImWchar, visible: bool);
}
extern "C" {
    #[link_name = "\u{1}?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z"]
    pub fn ImFont_IsGlyphRangeUnused(
        this: *mut ImFont,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}??0ImFont@@QEAA@XZ"]
    pub fn ImFont_ImFont(this: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}??_DImFont@@QEAAXXZ"]
    pub fn ImFont_ImFont_destructor(this: *mut ImFont);
}
impl ImFont {
    #[inline]
    pub unsafe fn FindGlyph(&self, c: ImWchar) -> *const ImFontGlyph {
        ImFont_FindGlyph(self, c)
    }
    #[inline]
    pub unsafe fn FindGlyphNoFallback(&self, c: ImWchar) -> *const ImFontGlyph {
        ImFont_FindGlyphNoFallback(self, c)
    }
    #[inline]
    pub unsafe fn CalcTextSizeA(
        &self,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        remaining: *mut *const ::std::os::raw::c_char,
    ) -> ImVec2 {
        ImFont_CalcTextSizeA(
            self, size, max_width, wrap_width, text_begin, text_end, remaining,
        )
    }
    #[inline]
    pub unsafe fn CalcWordWrapPositionA(
        &self,
        scale: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char {
        ImFont_CalcWordWrapPositionA(self, scale, text, text_end, wrap_width)
    }
    #[inline]
    pub unsafe fn RenderChar(
        &self,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        c: ImWchar,
    ) {
        ImFont_RenderChar(self, draw_list, size, pos, col, c)
    }
    #[inline]
    pub unsafe fn RenderText(
        &self,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        clip_rect: *const ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    ) {
        ImFont_RenderText(
            self,
            draw_list,
            size,
            pos,
            col,
            clip_rect,
            text_begin,
            text_end,
            wrap_width,
            cpu_fine_clip,
        )
    }
    #[inline]
    pub unsafe fn BuildLookupTable(&mut self) {
        ImFont_BuildLookupTable(self)
    }
    #[inline]
    pub unsafe fn ClearOutputData(&mut self) {
        ImFont_ClearOutputData(self)
    }
    #[inline]
    pub unsafe fn GrowIndex(&mut self, new_size: ::std::os::raw::c_int) {
        ImFont_GrowIndex(self, new_size)
    }
    #[inline]
    pub unsafe fn AddGlyph(
        &mut self,
        src_cfg: *const ImFontConfig,
        c: ImWchar,
        x0: f32,
        y0: f32,
        x1: f32,
        y1: f32,
        u0: f32,
        v0: f32,
        u1: f32,
        v1: f32,
        advance_x: f32,
    ) {
        ImFont_AddGlyph(self, src_cfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x)
    }
    #[inline]
    pub unsafe fn AddRemapChar(&mut self, dst: ImWchar, src: ImWchar, overwrite_dst: bool) {
        ImFont_AddRemapChar(self, dst, src, overwrite_dst)
    }
    #[inline]
    pub unsafe fn SetGlyphVisible(&mut self, c: ImWchar, visible: bool) {
        ImFont_SetGlyphVisible(self, c, visible)
    }
    #[inline]
    pub unsafe fn IsGlyphRangeUnused(
        &mut self,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool {
        ImFont_IsGlyphRangeUnused(self, c_begin, c_last)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFont_ImFont(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImFont_ImFont_destructor(self)
    }
}
pub const ImGuiViewportFlags__ImGuiViewportFlags_None: ImGuiViewportFlags_ = 0;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsPlatformWindow: ImGuiViewportFlags_ = 1;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsPlatformMonitor: ImGuiViewportFlags_ = 2;
pub const ImGuiViewportFlags__ImGuiViewportFlags_OwnedByApp: ImGuiViewportFlags_ = 4;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoDecoration: ImGuiViewportFlags_ = 8;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoTaskBarIcon: ImGuiViewportFlags_ = 16;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoFocusOnAppearing: ImGuiViewportFlags_ = 32;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoFocusOnClick: ImGuiViewportFlags_ = 64;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoInputs: ImGuiViewportFlags_ = 128;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoRendererClear: ImGuiViewportFlags_ = 256;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoAutoMerge: ImGuiViewportFlags_ = 512;
pub const ImGuiViewportFlags__ImGuiViewportFlags_TopMost: ImGuiViewportFlags_ = 1024;
pub const ImGuiViewportFlags__ImGuiViewportFlags_CanHostOtherWindows: ImGuiViewportFlags_ = 2048;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsMinimized: ImGuiViewportFlags_ = 4096;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsFocused: ImGuiViewportFlags_ = 8192;
pub type ImGuiViewportFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiViewport {
    pub ID: ImGuiID,
    pub Flags: ImGuiViewportFlags,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub ParentViewportId: ImGuiID,
    pub DrawData: *mut ImDrawData,
    pub RendererUserData: *mut ::std::os::raw::c_void,
    pub PlatformUserData: *mut ::std::os::raw::c_void,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
    pub PlatformHandleRaw: *mut ::std::os::raw::c_void,
    pub PlatformWindowCreated: bool,
    pub PlatformRequestMove: bool,
    pub PlatformRequestResize: bool,
    pub PlatformRequestClose: bool,
}
#[test]
fn bindgen_test_layout_ImGuiViewport() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiViewport> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiViewport>(),
        96usize,
        concat!("Size of: ", stringify!(ImGuiViewport))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiViewport>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiViewport))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkPos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(WorkPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(WorkSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DpiScale) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(DpiScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParentViewportId) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(ParentViewportId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DrawData) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(DrawData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RendererUserData) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(RendererUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformUserData) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformHandle) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformHandleRaw) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformHandleRaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformWindowCreated) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformWindowCreated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformRequestMove) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformRequestMove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformRequestResize) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformRequestResize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformRequestClose) as usize - ptr as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformRequestClose)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiPlatformIO {
    pub Platform_GetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext) -> *const ::std::os::raw::c_char,
    >,
    pub Platform_SetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, text: *const ::std::os::raw::c_char),
    >,
    pub Platform_ClipboardUserData: *mut ::std::os::raw::c_void,
    pub Platform_OpenInShellFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, path: *const ::std::os::raw::c_char) -> bool,
    >,
    pub Platform_OpenInShellUserData: *mut ::std::os::raw::c_void,
    pub Platform_SetImeDataFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            viewport: *mut ImGuiViewport,
            data: *mut ImGuiPlatformImeData,
        ),
    >,
    pub Platform_ImeUserData: *mut ::std::os::raw::c_void,
    pub Platform_LocaleDecimalPoint: ImWchar,
    pub Platform_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_ShowWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_SetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, pos: ImVec2)>,
    pub Platform_GetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Platform_GetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_GetWindowMinimized:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_SetWindowTitle: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, str_: *const ::std::os::raw::c_char),
    >,
    pub Platform_SetWindowAlpha:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, alpha: f32)>,
    pub Platform_UpdateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_GetWindowDpiScale:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> f32>,
    pub Platform_OnChangedViewport:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowWorkAreaInsets:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec4>,
    pub Platform_CreateVkSurface: ::std::option::Option<
        unsafe extern "C" fn(
            vp: *mut ImGuiViewport,
            vk_inst: ImU64,
            vk_allocators: *const ::std::os::raw::c_void,
            out_vk_surface: *mut ImU64,
        ) -> ::std::os::raw::c_int,
    >,
    pub Renderer_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Renderer_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Renderer_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Monitors: ImVector<ImGuiPlatformMonitor>,
    pub Viewports: ImVector<*mut ImGuiViewport>,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformIO() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiPlatformIO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformIO>(),
        288usize,
        concat!("Size of: ", stringify!(ImGuiPlatformIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformIO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetClipboardTextFn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetClipboardTextFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetClipboardTextFn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetClipboardTextFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_ClipboardUserData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_ClipboardUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_OpenInShellFn) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_OpenInShellFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Platform_OpenInShellUserData) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_OpenInShellUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetImeDataFn) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetImeDataFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_ImeUserData) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_ImeUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_LocaleDecimalPoint) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_LocaleDecimalPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_CreateWindow) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_CreateWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_DestroyWindow) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_DestroyWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_ShowWindow) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_ShowWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowPos) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowPos) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowSize) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowSize) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowFocus) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowFocus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowFocus) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowFocus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowMinimized) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowMinimized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowTitle) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowTitle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SetWindowAlpha) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_UpdateWindow) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_UpdateWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_RenderWindow) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_RenderWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_SwapBuffers) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SwapBuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_GetWindowDpiScale) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowDpiScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_OnChangedViewport) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_OnChangedViewport)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Platform_GetWindowWorkAreaInsets) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowWorkAreaInsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Platform_CreateVkSurface) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_CreateVkSurface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_CreateWindow) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_CreateWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_DestroyWindow) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_DestroyWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_SetWindowSize) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_SetWindowSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_RenderWindow) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_RenderWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Renderer_SwapBuffers) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_SwapBuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Monitors) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Monitors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Viewports) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Viewports)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}??0ImGuiPlatformIO@@QEAA@XZ"]
    pub fn ImGuiPlatformIO_ImGuiPlatformIO(this: *mut ImGuiPlatformIO);
}
impl ImGuiPlatformIO {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiPlatformIO_ImGuiPlatformIO(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformMonitor {
    pub MainPos: ImVec2,
    pub MainSize: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformMonitor() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiPlatformMonitor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformMonitor>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiPlatformMonitor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformMonitor>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformMonitor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MainPos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(MainPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MainSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(MainSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkPos) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(WorkPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WorkSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(WorkSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DpiScale) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(DpiScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlatformHandle) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(PlatformHandle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformImeData {
    pub WantVisible: bool,
    pub InputPos: ImVec2,
    pub InputLineHeight: f32,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformImeData() {
    const UNINIT: ::std::mem::MaybeUninit<ImGuiPlatformImeData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformImeData>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiPlatformImeData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformImeData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformImeData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WantVisible) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformImeData),
            "::",
            stringify!(WantVisible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputPos) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformImeData),
            "::",
            stringify!(InputPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputLineHeight) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformImeData),
            "::",
            stringify!(InputLineHeight)
        )
    );
}
pub type va_list = *mut ::std::os::raw::c_char;
#[test]
fn __bindgen_test_layout_ImVector_open0_ImWchar_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImWchar>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImWchar>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImWchar>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImWchar>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiTextFilter_ImGuiTextRange_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiTextFilter_ImGuiTextRange>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiTextFilter_ImGuiTextRange>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiTextFilter_ImGuiTextRange_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiTextFilter_ImGuiTextRange>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiTextFilter_ImGuiTextRange>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<::std::os::raw::c_char>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<::std::os::raw::c_char>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<::std::os::raw::c_char>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiStoragePair_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiStoragePair>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiStoragePair>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiStoragePair>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiStoragePair>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiSelectionRequest_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiSelectionRequest>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiSelectionRequest>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiSelectionRequest>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiSelectionRequest>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawCmd_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImDrawCmd>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImDrawCmd>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImDrawCmd>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImDrawCmd>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawIdx_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImDrawIdx>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImDrawIdx>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImDrawIdx>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImDrawIdx>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawChannel_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImDrawChannel>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImDrawChannel>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImDrawChannel>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImDrawChannel>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawCmd_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImDrawCmd>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImDrawCmd>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImDrawCmd>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImDrawCmd>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawIdx_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImDrawIdx>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImDrawIdx>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImDrawIdx>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImDrawIdx>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImDrawVert_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImDrawVert>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImDrawVert>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImDrawVert>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImDrawVert>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImVec2_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImVec2>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImVec2>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImVec2>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImVec2>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImVec4_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImVec4>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImVec4>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImVec4>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImVec4>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImTextureID_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImTextureID>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImTextureID>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImTextureID>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImTextureID>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ptr_ImDrawList_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<*mut ImDrawList>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<*mut ImDrawList>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<*mut ImDrawList>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<*mut ImDrawList>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImU32_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImU32>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImU32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImU32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImU32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImWchar_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImWchar>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImWchar>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImWchar>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImWchar>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ptr_ImFont_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<*mut ImFont>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<*mut ImFont>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<*mut ImFont>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<*mut ImFont>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImFontAtlasCustomRect_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImFontAtlasCustomRect>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImFontAtlasCustomRect>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImFontAtlasCustomRect>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImFontAtlasCustomRect>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImFontConfig_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImFontConfig>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImFontConfig>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImFontConfig>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImFontConfig>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<f32>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<f32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<f32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<f32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImWchar_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImWchar>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImWchar>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImWchar>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImWchar>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImFontGlyph_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImFontGlyph>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImFontGlyph>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImFontGlyph>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImFontGlyph>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ImGuiPlatformMonitor_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<ImGuiPlatformMonitor>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<ImGuiPlatformMonitor>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<ImGuiPlatformMonitor>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<ImGuiPlatformMonitor>)
        )
    );
}
#[test]
fn __bindgen_test_layout_ImVector_open0_ptr_ImGuiViewport_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<ImVector<*mut ImGuiViewport>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(ImVector<*mut ImGuiViewport>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector<*mut ImGuiViewport>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(ImVector<*mut ImGuiViewport>)
        )
    );
}
